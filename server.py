# server.py
import os
import io
import csv
import time
import html
import requests
from typing import Dict, Any, List, Optional
from datetime import datetime, date, timedelta
from fastapi import FastAPI, Request, Header, HTTPException
from fastapi.responses import JSONResponse

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID = os.getenv("CHAT_ID", "").strip()
SHEET_CSV_URL = os.getenv("SHEET_CSV_URL", "").strip()
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "").strip()

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}" if BOT_TOKEN else ""

app = FastAPI(title="BotSnab ‚Ä¢ –ü–æ—Å—Ç–∞–≤–∫–∏ –¢–ú–¶", version="1.3.0")

# ===== –ö—ç—à —Ç–∞–±–ª–∏—Ü—ã =====
_CSV_CACHE: Dict[str, Any] = {"ts": 0.0, "rows": []}
CSV_TTL = 60.0  # 1 –º–∏–Ω—É—Ç–∞

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
def tg_send_message(chat_id: int | str, text: str, parse_mode="HTML"):
    if not BOT_TOKEN:
        return {"ok": False, "error": "BOT_TOKEN is empty"}
    r = requests.post(
        f"{TG_API}/sendMessage",
        json={"chat_id": chat_id, "text": text, "parse_mode": parse_mode, "disable_web_page_preview": True},
        timeout=15
    )
    try:
        return r.json()
    except Exception:
        return {"ok": False, "text": r.text}

def esc(s: Optional[str]) -> str:
    return html.escape((s or "").strip())

def _parse_date(s: str) -> Optional[date]:
    s = (s or "").strip()
    if not s:
        return None
    for fmt in ("%Y-%m-%d", "%d.%m.%y", "%d.%m.%Y", "%d/%m/%Y"):
        try:
            return datetime.strptime(s, fmt).date()
        except Exception:
            pass
    return None

def _format_date_long(d: Optional[date]) -> str:
    if not d:
        return ""
    months = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    return f"{d.day} {months[d.month - 1]} {d.year}"

def _load_csv_rows() -> List[Dict[str, str]]:
    now = time.time()
    if _CSV_CACHE["rows"] and now - _CSV_CACHE["ts"] < CSV_TTL:
        return _CSV_CACHE["rows"]
    if not SHEET_CSV_URL:
        return []
    r = requests.get(SHEET_CSV_URL, timeout=20)
    r.raise_for_status()
    reader = csv.reader(io.StringIO(r.text))
    data = list(reader)
    if not data:
        return []
    headers = [h.strip() for h in data[0]]
    rows = []
    for raw in data[1:]:
        row = {headers[i]: raw[i].strip() if i < len(raw) else "" for i in range(len(headers))}
        rows.append(row)
    _CSV_CACHE.update({"ts": now, "rows": rows})
    return rows

def _field(row: Dict[str, str], *names: str) -> str:
    for n in names:
        if n in row:
            return row.get(n, "")
    keys = {k.strip().lower(): k for k in row}
    for n in names:
        if n.lower() in keys:
            return row[keys[n.lower()]]
    return ""

def _normalize_row(row: Dict[str, str]) -> Dict[str, Any]:
    return {
        "request": _field(row, "–ó–∞—è–≤–∫–∞"),
        "priority": _field(row, "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"),
        "status": _field(row, "–°—Ç–∞—Ç—É—Å"),
        "ship_date": _parse_date(_field(row, "–î–∞—Ç–∞/–û", "–î–∞—Ç–∞ –û", "–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏")),
        "arrive_date": _parse_date(_field(row, "–î–∞—Ç–∞/–î", "–î–∞—Ç–∞ –î", "–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è")),
        "tk": _field(row, "–¢–ö", "–¢–∫", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"),
        "ttn": _field(row, "‚Ññ –¢–¢–ù", "–¢–¢–ù", "–ù–æ–º–µ—Ä –¢–¢–ù"),
        "applicant": _field(row, "–ó–∞—è–≤–∏—Ç–µ–ª—å", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"),
        "comment": _field(row, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"),  # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º "‚Äî"
    }

def _load_data() -> List[Dict[str, Any]]:
    return [_normalize_row(r) for r in _load_csv_rows()]

# ===== –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ =====
def _fmt_card(item: Dict[str, Any]) -> str:
    parts = [
        "üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>",
        f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {esc(item['request'])}" if item["request"] else "",
        f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {esc(item['priority'])}" if item["priority"] else "",
        f"üöö <b>–°—Ç–∞—Ç—É—Å:</b> {esc(item['status'])}" if item["status"] else "",
        f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</b> {_format_date_long(item['ship_date'])}" if item["ship_date"] else "",
        f"üì¶ <b>–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</b> {_format_date_long(item['arrive_date'])}" if item["arrive_date"] else "",
        f"üöõ <b>–¢–ö:</b> {esc(item['tk'])}" if item["tk"] else "",
        f"üìÑ <b>‚Ññ –¢–¢–ù:</b> {esc(item['ttn'])}" if item["ttn"] else "",
        f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {esc(item['applicant'])}" if item["applicant"] else "",
        f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {esc(item['comment'] or '‚Äî')}",  # <-- –µ—Å–ª–∏ –Ω–µ—Ç, —Å—Ç–∞–≤–∏–º —Ç–∏—Ä–µ
    ]
    return "\n".join([p for p in parts if p])

def _reply_list(chat_id: int, title: str, items: List[Dict[str, Any]]):
    if not items:
        tg_send_message(chat_id, f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É <b>{esc(title)}</b>")
        return
    msg = f"üîé <b>{esc(title)}</b>\n\n" + "\n\n".join(_fmt_card(i) for i in items[:10])
    tg_send_message(chat_id, msg)

# ===== –ö–æ–º–∞–Ω–¥—ã =====
def handle_command(text: str, chat_id: int, from_user: dict, bot_username: str):
    parts = text.split(maxsplit=1)
    cmd = parts[0].lower()
    arg = parts[1].strip() if len(parts) > 1 else ""
    if '@' in cmd:
        base, at = cmd.split('@', 1)
        if at.lower() != bot_username.lower():
            return
        cmd = base
    data = _load_data()
    today = date.today()

    if cmd == "/start":
        tg_send_message(chat_id, "üëã –ë–æ—Ç —Å–Ω–∞–±–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    elif cmd == "/help":
        tg_send_message(chat_id,
            "üì¶ <b>–ö–æ–º–∞–Ω–¥—ã BotSnab</b>\n"
            "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "‚Ä¢ /my ‚Äî –º–æ–∏ –∑–∞—è–≤–∫–∏ (–ø–æ –§–ò–û –∏–ª–∏ username)\n"
            "‚Ä¢ /status <b>–°–¢–ê–¢–£–°</b> ‚Äî –∑–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É\n"
            "‚Ä¢ /today ‚Äî –æ—Ç–≥—Ä—É–∑–∫–∏ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚Ä¢ /week ‚Äî –æ—Ç–≥—Ä—É–∑–∫–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n"
            "‚Ä¢ /search <b>–¢–ï–ö–°–¢</b> ‚Äî –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ /priority ‚Äî –∞–≤–∞—Ä–∏–π–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
            "‚Ä¢ /last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏\n"
            "‚Ä¢ /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID"
        )
    elif cmd == "/id":
        tg_send_message(chat_id, f"–í–∞—à Telegram ID: <code>{from_user.get('id')}</code>")
    elif cmd == "/my":
        name = (from_user.get("first_name") or "").lower()
        username = (from_user.get("username") or "").lower()
        items = [r for r in data if username in (r["applicant"] or "").lower() or name in (r["applicant"] or "").lower()]
        _reply_list(chat_id, "–í–∞—à–∏ –∑–∞—è–≤–∫–∏", items)
    elif cmd == "/status":
        if not arg:
            tg_send_message(chat_id, "‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /status –í –ø—É—Ç–∏")
        else:
            items = [r for r in data if (r["status"] or "").lower() == arg.lower()]
            _reply_list(chat_id, f"–ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ¬´{arg}¬ª", items)
    elif cmd == "/today":
        items = [r for r in data if r["ship_date"] == today]
        _reply_list(chat_id, "–û—Ç–≥—Ä—É–∑–∫–∏ —Å–µ–≥–æ–¥–Ω—è", items)
    elif cmd == "/week":
        start = today - timedelta(days=today.weekday())
        end = start + timedelta(days=6)
        items = [r for r in data if r["ship_date"] and start <= r["ship_date"] <= end]
        _reply_list(chat_id, "–ü–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ", items)
    elif cmd == "/search":
        if not arg:
            tg_send_message(chat_id, "‚ùó –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: /search —Ñ–∏–ª—å—Ç—Ä–∞")
        else:
            items = [r for r in data if arg.lower() in (r["request"] or "").lower()]
            _reply_list(chat_id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {arg}", items)
    elif cmd == "/priority":
        items = [r for r in data if (r["priority"] or "").lower().startswith("–∞–≤–∞—Ä")]
        _reply_list(chat_id, "–ê–≤–∞—Ä–∏–π–Ω—ã–µ –∑–∞—è–≤–∫–∏", items)
    elif cmd == "/last":
        _reply_list(chat_id, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏", data[-10:])
    else:
        tg_send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /help.")

# ===== –†–æ—É—Ç—ã =====
@app.get("/")
def root():
    return {"ok": True, "routes": ["/", "/health", "/tg (GET/POST)", "/notify"]}

@app.get("/health")
def health():
    return {"ok": True, "service": "snab-bot", "webhook": "/tg"}

@app.get("/tg")
def tg_get():
    return {"ok": True, "route": "/tg"}

@app.post("/tg")
async def tg_post(req: Request, x_telegram_bot_api_secret_token: Optional[str] = Header(None)):
    if WEBHOOK_SECRET and (x_telegram_bot_api_secret_token or "") != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Invalid secret")
    data = await req.json()
    msg = data.get("message", {})
    text = (msg.get("text") or "").strip()
    chat = msg.get("chat", {})
    chat_id = chat.get("id")
    user = msg.get("from", {})
    if text.startswith("/"):
        me = requests.get(f"{TG_API}/getMe").json()
        bot_username = me["result"]["username"] if me.get("ok") else ""
        handle_command(text, chat_id, user, bot_username)
    return {"ok": True}
