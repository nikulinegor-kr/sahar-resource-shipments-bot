# server.py
import os
import io
import csv
import time
import json
import html
import math
import requests
from typing import Dict, Any, List, Optional
from datetime import datetime, date, timedelta

from fastapi import FastAPI, Request, Header, HTTPException
from fastapi.responses import JSONResponse

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID = os.getenv("CHAT_ID", "").strip()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
SHEET_CSV_URL = os.getenv("SHEET_CSV_URL", "").strip()
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "").strip()  # –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}" if BOT_TOKEN else ""

# ====== –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ======
app = FastAPI(title="BotSnab ‚Ä¢ TMC Shipments", version="1.1.0")

# ====== –ö—ç—à CSV (—á—Ç–æ–±—ã –Ω–µ –¥–æ–ª–±–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É) ======
_CSV_CACHE: Dict[str, Any] = {
    "ts": 0.0,
    "rows": [],
    "headers": []
}
CSV_TTL = 60.0  # —Å–µ–∫

# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======
def tg_send_message(chat_id: int | str, text: str, parse_mode: str = "HTML") -> Dict[str, Any]:
    if not BOT_TOKEN:
        return {"ok": False, "error": "BOT_TOKEN is empty"}
    try:
        r = requests.post(
            f"{TG_API}/sendMessage",
            json={
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode,
                "disable_web_page_preview": True
            },
            timeout=15
        )
        try:
            return r.json()
        except Exception:
            return {"ok": False, "status": r.status_code, "text": r.text}
    except Exception as e:
        return {"ok": False, "error": str(e)}


def esc(s: Optional[str]) -> str:
    return html.escape((s or "").strip())


def _parse_date(s: str) -> Optional[date]:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤:
      - 2025-10-13
      - 13.10.25, 13.10.2025
      - 13/10/2025
    """
    s = (s or "").strip()
    if not s:
        return None
    for fmt in ("%Y-%m-%d", "%d.%m.%y", "%d.%m.%Y", "%d/%m/%Y"):
        try:
            return datetime.strptime(s, fmt).date()
        except Exception:
            pass
    return None


def _format_date_long(d: Optional[date]) -> str:
    if not d:
        return ""
    months = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    return f"{d.day} {months[d.month - 1]} {d.year}"


def _load_csv_rows() -> List[Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏–∑ CSV —Å –∫—ç—à–µ–º."""
    now = time.time()
    if _CSV_CACHE["rows"] and now - _CSV_CACHE["ts"] < CSV_TTL:
        return _CSV_CACHE["rows"]

    if not SHEET_CSV_URL:
        _CSV_CACHE.update({"ts": now, "rows": [], "headers": []})
        return []

    r = requests.get(SHEET_CSV_URL, timeout=20)
    r.raise_for_status()
    content = r.content.decode("utf-8")
    reader = csv.reader(io.StringIO(content))
    rows = list(reader)
    if not rows:
        _CSV_CACHE.update({"ts": now, "rows": [], "headers": []})
        return []

    headers = [h.strip() for h in rows[0]]
    data = []
    for raw in rows[1:]:
        row = {}
        for i, h in enumerate(headers):
            row[h] = (raw[i].strip() if i < len(raw) else "")
        data.append(row)

    _CSV_CACHE.update({"ts": now, "rows": data, "headers": headers})
    return data


def _field(row: Dict[str, str], *candidates: str) -> str:
    """–í—ã—Ç—è–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)."""
    for key in candidates:
        if key in row:
            return row.get(key, "")
    # –∏–Ω–æ–≥–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –ª–∏—à–Ω–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
    keys = {k.strip(): k for k in row.keys()}
    for key in candidates:
        if key in keys:
            return row.get(keys[key], "")
    return ""


def _who_is_applicant(row: Dict[str, str]) -> str:
    # –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ ‚Äî ¬´–ó–∞—è–≤–∏—Ç–µ–ª—å¬ª
    v = _field(row, "–ó–∞—è–≤–∏—Ç–µ–ª—å", "–ó–∞—è–≤–∏—Ç–µ–ª—å:", "–ó–∞—è–≤–∏—Ç–µ–ª—å(–§–ò–û)")
    if not v:
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî ¬´–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å¬ª
        v = _field(row, "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π")
    return v


def _normalize_row(row: Dict[str, str]) -> Dict[str, Any]:
    """–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª–µ–π –∫ –µ–¥–∏–Ω—ã–º –∏–º–µ–Ω–∞–º –¥–ª—è –ª–æ–≥–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
    return {
        "request": _field(row, "–ó–∞—è–≤–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"),
        "priority": _field(row, "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"),
        "status": _field(row, "–°—Ç–∞—Ç—É—Å"),
        "ship_date": _parse_date(_field(row, "–î–∞—Ç–∞/–û", "–î–∞—Ç–∞ –û", "–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏")),
        "arrive_date": _parse_date(_field(row, "–î–∞—Ç–∞/–î", "–î–∞—Ç–∞ –î", "–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è")),
        "tk": _field(row, "–¢–ö", "–¢–∫", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"),
        "ttn": _field(row, "‚Ññ –¢–¢–ù", "‚Ññ–¢–¢–ù", "–¢–¢–ù"),
        "applicant": _who_is_applicant(row),
        "raw": row,  # –æ—Å—Ç–∞–≤–∏–º –≤—Å—ë –∏—Å—Ö–æ–¥–Ω–æ–µ
    }


def _load_data() -> List[Dict[str, Any]]:
    return [_normalize_row(r) for r in _load_csv_rows()]


def _fmt_card(item: Dict[str, Any]) -> str:
    """–ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞—è–≤–∫–∏."""
    parts = [
        "üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>",
        f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {esc(item['request'])}" if item["request"] else "",
        f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {esc(item['priority'])}" if item["priority"] else "",
        f"üöö <b>–°—Ç–∞—Ç—É—Å:</b> {esc(item['status'])}" if item["status"] else "",
        f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</b> {_format_date_long(item['ship_date'])}" if item["ship_date"] else "",
        f"üì¶ <b>–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</b> {_format_date_long(item['arrive_date'])}" if item["arrive_date"] else "",
        f"üöõ <b>–¢–ö:</b> {esc(item['tk'])}" if item["tk"] else "",
        f"üìÑ <b>‚Ññ –¢–¢–ù:</b> {esc(item['ttn'])}" if item["ttn"] else "",
        f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {esc(item['applicant'])}" if item["applicant"] else "",
    ]
    return "\n".join([p for p in parts if p])


def _paginate(items: List[Dict[str, Any]], limit: int = 10) -> List[List[Dict[str, Any]]]:
    if limit <= 0:
        limit = 10
    pages = []
    for i in range(0, len(items), limit):
        pages.append(items[i:i+limit])
    return pages


def _reply_list(chat_id: int, title: str, items: List[Dict[str, Any]], limit: int = 6):
    if not items:
        tg_send_message(chat_id, f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {esc(title)}")
        return
    pages = _paginate(items, limit)
    for idx, page in enumerate(pages, 1):
        header = f"üîé <b>{esc(title)}</b> ‚Ä¢ —Å—Ç—Ä. {idx}/{len(pages)}"
        body = "\n\n".join(_fmt_card(x) for x in page)
        tg_send_message(chat_id, f"{header}\n\n{body}")


# ====== HELP ======
def get_help_text() -> str:
    return (
        "üì¶ <b>BotSnab ‚Äî –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "‚Ä¢ /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n\n"
        "üë§ <b>–õ–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</b>\n"
        "‚Ä¢ /my ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ (–ø–æ ¬´–ó–∞—è–≤–∏—Ç–µ–ª—å¬ª –∏–ª–∏ ¬´–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å¬ª)\n"
        "‚Ä¢ /status &lt;—Å—Ç–∞—Ç—É—Å&gt; ‚Äî –∑–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É (–Ω–∞–ø—Ä.: /status –í –ø—É—Ç–∏)\n"
        "‚Ä¢ /today ‚Äî –æ—Ç–≥—Ä—É–∑–∫–∏ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ /week ‚Äî –æ—Ç–≥—Ä—É–∑–∫–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n"
        "‚Ä¢ /search &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚Ä¢ /priority ‚Äî –≤—Å–µ –∞–≤–∞—Ä–∏–π–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ /last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–∞–º\n\n"
        "‚ÑπÔ∏è –í –≥—Ä—É–ø–ø–µ –ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ privacy, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–∏–º—è–±–æ—Ç–∞: /help@–ò–º—è–ë–æ—Ç–∞"
    )


# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ======
def handle_command(text: str, chat_id: int, from_user: dict, bot_username: str):
    # –æ—Ç–¥–µ–ª–∏–º /cmd –æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parts = text.split(maxsplit=1)
    cmd = parts[0].lower()
    args = parts[1] if len(parts) > 1 else ""

    # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å–ª–∞–Ω–∞ –∫–∞–∫ /help@BotName ‚Äî –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ /help, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –∏–º—è
    if '@' in cmd:
        base, at = cmd.split('@', 1)
        if at.lower() != bot_username.lower():
            return  # —ç—Ç–æ –Ω–µ –Ω–∞—à –±–æ—Ç
        cmd = base

    user_id = from_user.get("id")
    user_name = from_user.get("first_name", "")

    data = None  # –±—É–¥–µ–º –ª–µ–Ω–∏–≤–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å CSV –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é

    def ensure_data():
        nonlocal data
        if data is None:
            data = _load_data()
        return data

    if cmd == "/start":
        tg_send_message(chat_id, "üëã –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    if cmd == "/help":
        tg_send_message(chat_id, get_help_text())
        return

    if cmd == "/id":
        tg_send_message(chat_id, f"–í–∞—à Telegram ID: <code>{user_id}</code>")
        return

    if cmd == "/my":
        rows = ensure_data()
        # ¬´–ú–æ–∏–º–∏¬ª —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –ø–æ–ª–µ ¬´–ó–∞—è–≤–∏—Ç–µ–ª—å¬ª –∏–ª–∏ ¬´–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å¬ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è/username
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Ç–æ—á–Ω–∏–º.
        query_tokens = []
        if from_user.get("username"):
            query_tokens.append(from_user["username"])
        if user_name:
            query_tokens.append(user_name)

        def _belongs(r):
            who = (r["applicant"] or "").lower()
            for t in query_tokens:
                if t and t.lower() in who:
                    return True
            return False

        items = [r for r in rows if _belongs(r)]
        _reply_list(chat_id, "–í–∞—à–∏ –∑–∞—è–≤–∫–∏", items)
        return

    if cmd == "/status":
        status = args.strip()
        if not status:
            tg_send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>/status –í –ø—É—Ç–∏</code>")
            return
        rows = ensure_data()
        items = [r for r in rows if (r["status"] or "").lower() == status.lower()]
        _reply_list(chat_id, f"–ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ¬´{status}¬ª", items)
        return

    if cmd == "/today":
        rows = ensure_data()
        today = date.today()
        items = [r for r in rows if r["ship_date"] == today]
        _reply_list(chat_id, "–û—Ç–≥—Ä—É–∑–∫–∏ —Å–µ–≥–æ–¥–Ω—è", items)
        return

    if cmd == "/week":
        rows = ensure_data()
        today = date.today()
        start_week = today - timedelta(days=today.weekday())
        end_week = start_week + timedelta(days=6)
        items = [r for r in rows if r["ship_date"] and start_week <= r["ship_date"] <= end_week]
        _reply_list(chat_id, "–ü–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ", items)
        return

    if cmd == "/search":
        q = args.strip()
        if not q:
            tg_send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: <code>/search —Ñ–∏–ª—å—Ç—Ä–∞</code>")
            return
        rows = ensure_data()
        qq = q.lower()
        items = [r for r in rows if qq in (r["request"] or "").lower()]
        _reply_list(chat_id, f"–ü–æ–∏—Å–∫: ¬´{q}¬ª", items)
        return

    if cmd == "/priority":
        rows = ensure_data()
        items = [r for r in rows if (r["priority"] or "").lower().startswith("–∞–≤–∞—Ä")]
        _reply_list(chat_id, "–ê–≤–∞—Ä–∏–π–Ω—ã–µ –∑–∞—è–≤–∫–∏", items)
        return

    if cmd == "/last":
        # –ë–µ–∑ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ ¬´updated_at¬ª –≤ CSV –ø–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∫–∞–∫ ¬´–Ω–æ–≤—ã–µ/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ¬ª.
        rows = ensure_data()
        items = rows[-10:] if len(rows) > 10 else rows
        _reply_list(chat_id, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", items)
        return

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –∫–∏–Ω–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    tg_send_message(chat_id, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ /help")


# ====== –†–æ—É—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ ======

@app.get("/")
def root():
    return {"ok": True, "routes": ["/", "/health", "/tg (GET/POST)", "/notify (reserved)", "/docs"]}


@app.get("/health")
def health():
    return {"ok": True, "service": "snab-bot", "webhook": "/tg"}


@app.get("/tg")
def tg_probe():
    return {"ok": True, "route": "/tg"}


@app.post("/tg")
async def tg_webhook(req: Request, x_telegram_bot_api_secret_token: Optional[str] = Header(None)):
    """
    –í–µ–±—Ö—É–∫ Telegram. –ï—Å–ª–∏ –≤ BotFather –∑–∞–¥–∞–Ω Secret Token ‚Äî –º–æ–∂–Ω–æ —Å–≤–µ—Ä—è—Ç—å —Å WEBHOOK_SECRET.
    """
    if WEBHOOK_SECRET:
        # –ï—Å–ª–∏ –≤—ã –≤–∫–ª—é—á–∏–ª–∏ —Å–µ–∫—Ä–µ—Ç –≤ BotFather ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É:
        # if (x_telegram_bot_api_secret_token or "") != WEBHOOK_SECRET:
        #     raise HTTPException(status_code=403, detail="Invalid webhook secret")
        pass

    if not BOT_TOKEN:
        raise HTTPException(status_code=500, detail="BOT_TOKEN not configured")

    try:
        update = await req.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Bad JSON")

    # –û–ø—Ä–µ–¥–µ–ª–∏–º –∏–º—è –±–æ—Ç–∞ (–¥–ª—è /help@–ò–º—è–ë–æ—Ç–∞ –∏ —Ç.–ø.)
    bot_username = ""
    try:
        me = requests.get(f"{TG_API}/getMe", timeout=10).json()
        if me.get("ok"):
            bot_username = me["result"]["username"]
    except Exception:
        pass

    message = update.get("message") or update.get("edited_message") or {}
    text = (message.get("text") or "").strip()
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    from_user = message.get("from") or {}

    # –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /)
    if text.startswith("/"):
        handle_command(text, chat_id, from_user, bot_username)
    else:
        # –ò–≥–Ω–æ—Ä –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –º—É—Å–æ—Ä–∏—Ç—å —á–∞—Ç
        pass

    return JSONResponse({"ok": True})


# ====== (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫–æ–¥–∞ ======
@app.post("/notify")
def notify_example():
    if not CHAT_ID:
        return {"ok": False, "error": "CHAT_ID is empty"}
    # –ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ ¬´–∫–∞–∫ —É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã¬ª
    msg = (
        "üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>\n"
        "üßæ <b>–ó–∞—è–≤–∫–∞:</b> –ü—Ä–∏–º–µ—Ä\n"
        "‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> –ê–≤–∞—Ä–∏–π–Ω–æ\n"
        "üöö <b>–°—Ç–∞—Ç—É—Å:</b> –í –ø—É—Ç–∏\n"
        "üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</b> 13 –æ–∫—Ç—è–±—Ä—è 2025\n"
        "üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> –ò–≤–∞–Ω–æ–≤ –ò.–ò."
    )
    res = tg_send_message(CHAT_ID, msg)
    return res
