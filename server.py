import os
import html
import requests
from fastapi import FastAPI, Request, Header, HTTPException
from typing import Optional, Dict, Any
from threading import Thread

app = FastAPI(title="Snab Notify Bot", version="2.3.0")

# ===== ENV (–Ω–∞—Å—Ç—Ä–æ–π –≤ Koyeb) =====
BOT_TOKEN        = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID          = os.getenv("CHAT_ID", "").strip()               # -100xxxxxxxxxx
WEBHOOK_SECRET   = os.getenv("WEBHOOK_SECRET", "").strip()        # –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å CFG.SECRET –≤ Apps Script (–¥–ª—è /notify)
SHEET_SCRIPT_URL = os.getenv("SHEET_SCRIPT_URL", "").strip()      # URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Apps Script (Deploy ‚Üí Web app ‚Üí URL)
SHEET_API_KEY    = os.getenv("SHEET_API_KEY", "").strip()         # –∫–ª—é—á –¥–ª—è doPost –≤ Apps Script (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å CFG.SECRET)

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}" if BOT_TOKEN else ""

# –ñ–¥—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è ¬´–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É¬ª
pending_comments: Dict[int, str] = {}  # {user_id: order_id}


# ======== Telegram helpers ========
def tg_send_message(text: str, reply_markup: Optional[Dict] = None, parse_mode: str = "HTML"):
    if not BOT_TOKEN or not CHAT_ID:
        print("‚ö†Ô∏è BOT_TOKEN or CHAT_ID missing")
        return {"ok": False, "error": "BOT_TOKEN/CHAT_ID missing"}
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True,
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    try:
        r = requests.post(f"{TG_API}/sendMessage", json=payload, timeout=10)
        return r.json()
    except Exception as e:
        print("tg_send_message error:", e)
        return {"ok": False, "error": str(e)}

def tg_answer_callback_query(callback_query_id: str, text: str = "", show_alert: bool = False):
    if not BOT_TOKEN:
        return
    try:
        requests.post(f"{TG_API}/answerCallbackQuery",
                      json={"callback_query_id": callback_query_id, "text": text, "show_alert": show_alert},
                      timeout=8)
    except Exception as e:
        print("answerCallback error:", e)

def tg_edit_reply_markup(chat_id: int, message_id: int):
    """–£–¥–∞–ª–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if not BOT_TOKEN:
        return
    try:
        requests.post(f"{TG_API}/editMessageReplyMarkup",
                      json={"chat_id": chat_id, "message_id": message_id, "reply_markup": {"inline_keyboard": []}},
                      timeout=8)
    except Exception as e:
        print("editReplyMarkup error:", e)

def user_display_name(u: Dict[str, Any]) -> str:
    first = u.get("first_name") or ""
    last  = u.get("last_name") or ""
    full  = (first + " " + last).strip()
    if full:
        return full
    return u.get("username") or str(u.get("id") or "user")


# ======== Sheets helpers ========
def update_sheet_status(order_id: str, new_status: str, comment: Optional[str] = None):
    """
    –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–∏ –æ–ø—Ü. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π) –≤ Google Sheets —á–µ—Ä–µ–∑ Apps Script doPost.
    –¢–µ–ª–æ JSON:
      {
        "api_key": SHEET_API_KEY,   # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        "action": "status" | "status_with_comment",
        "order_id": "...",
        "new_status": "...",
        "comment": "..."            # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
      }
    """
    if not SHEET_SCRIPT_URL or not SHEET_API_KEY:
        print("‚ö†Ô∏è SHEET_SCRIPT_URL or SHEET_API_KEY missing")
        return

    payload = {
        "api_key": SHEET_API_KEY,
        "order_id": order_id,
    }

    if comment:
        payload.update({"action": "status_with_comment", "new_status": new_status, "comment": comment})
    else:
        payload.update({"action": "status", "new_status": new_status})

    try:
        res = requests.post(SHEET_SCRIPT_URL, json=payload, timeout=12)
        print("Sheet update:", res.status_code, res.text)
    except Exception as e:
        print("update_sheet_status error:", e)


# ======== –§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ========
def format_order_text(data: Dict[str, Any]) -> str:
    g = lambda k: (data.get(k) or "").strip()
    lines = ["üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>"]
    lines.append(f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {html.escape(g('order_id') or '‚Äî')}")
    if g("priority"): lines.append(f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {html.escape(g('priority'))}")
    if g("status"):   lines.append(f"üöö <b>–°—Ç–∞—Ç—É—Å:</b> {html.escape(g('status'))}")
    if g("carrier"):  lines.append(f"üöõ <b>–¢–ö:</b> {html.escape(g('carrier'))}")
    if g("ttn"):      lines.append(f"üìÑ <b>‚Ññ –¢–¢–ù:</b> {html.escape(g('ttn'))}")
    if g("ship_date"):lines.append(f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</b> {html.escape(g('ship_date'))}")
    if g("arrival"):  lines.append(f"üìÖ <b>–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</b> {html.escape(g('arrival'))}")
    if g("applicant"):lines.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {html.escape(g('applicant'))}")
    if g("comment"):  lines.append(f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {html.escape(g('comment'))}")
    return "\n".join(lines)

def build_keyboard(comment: str, status: str, order_id: str) -> Optional[Dict]:
    """
    –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:
      - –µ—Å–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å—Ç—å "–¢–†–ï–ë–£–ï–¢–°–Ø –°–û–ì–õ–ê–°–û–í–ê–ù–ò–ï" ‚Üí –∫–Ω–æ–ø–∫–∏ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ / –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É / –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
      - –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –¢–ö" ‚Üí –∫–Ω–æ–ø–∫–∞ "–¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û"
    """
    c = (comment or "").lower()
    s = (status or "").lower()

    if "—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ" in c:
        return {
            "inline_keyboard": [
                [{"text": "‚úÖ –í –†–ê–ë–û–¢–£: –°–û–ì–õ–ê–°–û–í–ê–ù–û", "callback_data": f"approve|{order_id}"}],
                [{"text": "üîß –ù–ê –î–û–†–ê–ë–û–¢–ö–£",           "callback_data": f"revise|{order_id}"}],
                [{"text": "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û",              "callback_data": f"reject|{order_id}"}],
            ]
        }

    if "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫" in s:
        return {
            "inline_keyboard": [
                [{"text": "üì¶ –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û", "callback_data": f"received|{order_id}"}]
            ]
        }

    return None


# ======== –†–æ—É—Ç—ã ========
@app.get("/")
def root():
    return {"ok": True, "routes": ["/", "/health", "/notify", "/tg (GET/POST)", "/docs"]}

@app.get("/health")
def health():
    return {"ok": True, "service": "snab-bot", "webhook": "/tg", "notify": "/notify"}

@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç Apps Script (Bearer WEBHOOK_SECRET)
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Missing Authorization header")
    token = authorization.split("Bearer ", 1)[-1].strip()
    if token != WEBHOOK_SECRET:
        raise HTTPException(status_code=401, detail="Invalid token")

    data = await req.json()
    text = format_order_text(data)
    kb = build_keyboard(
        comment=data.get("comment", ""),
        status=data.get("status", ""),
        order_id=data.get("order_id", "")
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    Thread(target=lambda: tg_send_message(text, reply_markup=kb)).start()
    return {"ok": True}

@app.post("/tg")
async def tg_webhook(req: Request):
    update = await req.json()
    print("TG update:", update)

    # –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
    if "callback_query" in update:
        cq = update["callback_query"]
        cb_id = cq.get("id")
        data  = cq.get("data", "")
        msg   = cq.get("message", {})
        chat  = msg.get("chat", {})
        chat_id = chat.get("id")
        message_id = msg.get("message_id")
        user = cq.get("from", {})
        user_name = user_display_name(user)

        try:
            action, order_id = data.split("|", 1)
        except ValueError:
            tg_answer_callback_query(cb_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return {"ok": False}

        # –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id and message_id:
            tg_edit_reply_markup(chat_id, message_id)

        if action == "approve":
            new_status = "–í –†–ê–ë–û–¢–£: –°–û–ì–õ–ê–°–û–í–ê–ù–û"
            update_sheet_status(order_id, new_status)
            tg_answer_callback_query(cb_id, "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ ‚úÖ")
            tg_send_message(f"‚úÖ –ó–∞—è–≤–∫–∞ <b>{html.escape(order_id)}</b> —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞.\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>{html.escape(user_name)}</b>")

        elif action == "reject":
            new_status = "–û–¢–ö–õ–û–ù–ï–ù–û"
            update_sheet_status(order_id, new_status)
            tg_answer_callback_query(cb_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå")
            tg_send_message(f"‚ùå –ó–∞—è–≤–∫–∞ <b>{html.escape(order_id)}</b> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\nüë§ –†–µ—à–µ–Ω–∏–µ: <b>{html.escape(user_name)}</b>")

        elif action == "revise":
            # –∂–¥—ë–º —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç –Ω–∞–∂–∞–≤—à–µ–≥–æ
            pending_comments[user.get("id")] = order_id
            tg_answer_callback_query(cb_id, "–£–∫–∞–∂–∏—Ç–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ üîß")
            tg_send_message(
                f"üîß –î–ª—è –∑–∞—è–≤–∫–∏ <b>{html.escape(order_id)}</b> —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.\n"
                f"üë§ <b>{html.escape(user_name)}</b>, –æ—Ç–≤–µ—Ç—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç–æ–º ‚Äî –æ–Ω –ø–æ–ø–∞–¥—ë—Ç –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
            )

        elif action == "received":
            # –≤ —Ç–∞–±–ª–∏—Ü—É –ø–∏—à–µ–º —Ä–æ–≤–Ω–æ ¬´–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ¬ª
            new_status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
            update_sheet_status(order_id, new_status)
            tg_answer_callback_query(cb_id, "–¢–ú–¶ –ø–æ–ª—É—á–µ–Ω–æ üì¶")
            tg_send_message(
                f"üì¶ –¢–ú–¶ –ø–æ –∑–∞—è–≤–∫–µ <b>{html.escape(order_id)}</b> –ø–æ–ª—É—á–µ–Ω–æ.\n"
                f"üìã –°—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ: <b>{new_status}</b>\n"
                f"üë§ –û—Ç–º–µ—Ç–∏–ª: <b>{html.escape(user_name)}</b>"
            )

        else:
            tg_answer_callback_query(cb_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        return {"ok": True}

    # –û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"
    if "message" in update:
        msg = update["message"]
        user = msg.get("from", {})
        text = (msg.get("text") or "").strip()
        if not text:
            return {"ok": True}

        uid = user.get("id")
        if uid in pending_comments:
            order_id = pending_comments.pop(uid)
            new_status = "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"
            update_sheet_status(order_id, new_status, comment=text)
            tg_send_message(
                f"üîß –ó–∞—è–≤–∫–∞ <b>{html.escape(order_id)}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {html.escape(text)}\n"
                f"üë§ –û—Ç: <b>{html.escape(user_display_name(user))}</b>"
            )
        return {"ok": True}

    return {"ok": True}
