import os
import html
import requests
from fastapi import FastAPI, Request, Header, HTTPException
from typing import Optional, Dict, Any

# ========= –ù–ê–°–¢–†–û–ô–ö–ò (—á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Koyeb) =========
BOT_TOKEN        = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID          = os.getenv("CHAT_ID", "").strip()              # id –≥—Ä—É–ø–ø—ã/—Ç–æ–ø–∏–∫–∞, –∫—É–¥–∞ —Å–ª–∞—Ç—å
WEBHOOK_SECRET   = os.getenv("WEBHOOK_SECRET", "").strip()       # —Å–µ–∫—Ä–µ—Ç –¥–ª—è /notify (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã)
SHEET_SCRIPT_URL = os.getenv("SHEET_SCRIPT_URL", "").strip()     # URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Apps Script (Deploy‚ÜíWeb app)
SHEET_API_KEY    = os.getenv("SHEET_API_KEY", "").strip()        # –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –±–æ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

app = FastAPI(title="SnabNotifyBot", version="2.0.0")

# –¥–ª—è ¬´–ù–ê –î–û–†–ê–ë–û–¢–ö–£¬ª: –æ–∂–∏–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
PENDING_REVISE: Dict[int, str] = {}  # user_id -> order_id


# ========= –£–¢–ò–õ–ò–¢–´ =========
def tg_send_message(text: str, reply_markup: Optional[Dict] = None, parse_mode: str = "HTML"):
    if not BOT_TOKEN or not CHAT_ID:
        print("‚ö†Ô∏è tg_send_message: BOT_TOKEN/CHAT_ID missing")
        return {"ok": False, "reason": "no token/chat"}
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True,
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    r = requests.post(f"{TG_API}/sendMessage", json=payload, timeout=10)
    try:
        return r.json()
    except Exception:
        return {"ok": False, "status_code": r.status_code, "text": r.text}


def tg_edit_reply_markup(chat_id: int, message_id: int, reply_markup: Optional[Dict]):
    # –æ–±–Ω—É–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    payload = {"chat_id": chat_id, "message_id": message_id, "reply_markup": reply_markup or {}}
    r = requests.post(f"{TG_API}/editMessageReplyMarkup", json=payload, timeout=10)
    return r.json()


def tg_answer_callback(callback_id: str, text: str):
    requests.post(f"{TG_API}/answerCallbackQuery", json={"callback_query_id": callback_id, "text": text}, timeout=10)


def fmt_user(u: Dict[str, Any]) -> str:
    username = u.get("username")
    if username:
        return f"@{username}"
    first = (u.get("first_name") or "").strip()
    last  = (u.get("last_name") or "").strip()
    return (first + (" " + last if last else "")).strip() or f"id:{u.get('id')}"


def update_sheet_status(order_id: str, new_status: str, comment: Optional[str] = None):
    if not SHEET_SCRIPT_URL or not SHEET_API_KEY:
        print("‚ö†Ô∏è update_sheet_status: SHEET_SCRIPT_URL/SHEET_API_KEY missing")
        return {"ok": False, "reason": "sheet creds missing"}

    body = {"action": "status", "order_id": order_id, "new_status": new_status}
    if comment:
        body = {"action": "status_with_comment", "order_id": order_id, "new_status": new_status, "comment": comment}

    r = requests.post(
        SHEET_SCRIPT_URL,
        headers={"Authorization": f"Bearer {SHEET_API_KEY}"},
        json=body,
        timeout=12
    )
    print("Sheet update:", r.status_code, r.text)
    try:
        return r.json()
    except Exception:
        return {"ok": False, "status_code": r.status_code, "text": r.text}


def safe(x):  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä + —ç—Å–∫–µ–π–ø
    return html.escape((x or "").strip())


# ========= –ö–õ–ê–í–ò–ê–¢–£–†–´ (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏) =========
def build_keyboard_for_comment(comment: str, order_id: str):
    c = (comment or "").lower().strip()
    if "—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ" in c:
        # —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏: –í –†–ê–ë–û–¢–£ / –ù–ê –î–û–†–ê–ë–û–¢–ö–£ / –û–¢–ö–õ–û–ù–ï–ù–û
        return {
            "inline_keyboard": [
                [{"text": "‚úÖ –í –†–ê–ë–û–¢–£", "callback_data": f"approve|{order_id}"}],
                [{"text": "üîß –ù–ê –î–û–†–ê–ë–û–¢–ö–£", "callback_data": f"revise|{order_id}"}],
                [{"text": "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û", "callback_data": f"reject|{order_id}"}],
            ]
        }
    return None


def build_keyboard_for_status(status_or_comment: str, order_id: str):
    s = (status_or_comment or "").lower().strip()
    # –∫–Ω–æ–ø–∫–∞ –ü–û–õ–£–ß–ï–ù–û –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –∫–µ–π—Å–∞ ¬´–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫¬ª
    if "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫" in s:
        return {"inline_keyboard": [[{"text": "üì¶ –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û", "callback_data": f"received|{order_id}"}]]}
    return None


# ========= /notify (–ø–æ–ª—É—á–∞–µ—Ç JSON –∏–∑ Apps Script) =========
@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    if authorization != f"Bearer {WEBHOOK_SECRET}":
        raise HTTPException(status_code=401, detail="Unauthorized")

    data = await req.json()

    order_id = (data.get("order_id") or "").strip()
    status   = (data.get("status") or "").strip()
    prio     = (data.get("priority") or "").strip()
    ship     = (data.get("ship_date") or "").strip()
    arrival  = (data.get("arrival") or "").strip()
    carrier  = (data.get("carrier") or "").strip()
    ttn      = (data.get("ttn") or "").strip()
    appl     = (data.get("applicant") or "").strip()
    comment  = (data.get("comment") or "").strip()

    # –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
    lines = ["üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>"]
    if order_id: lines.append(f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {safe(order_id)}")
    if prio:     lines.append(f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {safe(prio)}")
    if status:   lines.append(f"üöö <b>–°—Ç–∞—Ç—É—Å:</b> {safe(status)}")
    if carrier:  lines.append(f"üöõ <b>–¢–ö:</b> {safe(carrier)}")
    if ttn:      lines.append(f"üìÑ <b>‚Ññ –¢–¢–ù:</b> {safe(ttn)}")
    if ship:     lines.append(f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</b> {safe(ship)}")
    if arrival:  lines.append(f"üìÖ <b>–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</b> {safe(arrival)}")
    if appl:     lines.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {safe(appl)}")
    if comment:  lines.append(f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {safe(comment)}")

    text = "\n".join(lines)

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
    kb = build_keyboard_for_comment(comment, order_id)
    if not kb:
        kb = build_keyboard_for_status(status or comment, order_id)

    res = tg_send_message(text, reply_markup=kb)
    return {"ok": True, "sent": res}


# ========= Telegram webhook (–∫–ª–∏–∫–∏ –∏ –æ—Ç–≤–µ—Ç—ã) =========
@app.post("/tg")
async def tg_webhook(req: Request):
    upd = await req.json()
    print("TG update:", str(upd)[:1000])

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ---
    if "callback_query" in upd:
        cq   = upd["callback_query"]
        data = (cq.get("data") or "")
        user = cq.get("from", {})
        chat = cq.get("message", {}).get("chat", {})
        mid  = cq.get("message", {}).get("message_id")
        cbid = cq.get("id")

        parts = data.split("|", 1)
        if len(parts) != 2:
            return {"ok": True}

        action, order_id = parts
        who = fmt_user(user)

        # –≤—ã–∫–ª—é—á–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        try:
            tg_edit_reply_markup(chat_id=chat["id"], message_id=mid, reply_markup=None)
        except Exception as e:
            print("edit markup error:", e)

        # –æ—Ç–≤–µ—Ç–∏—Ç—å Telegram, —á—Ç–æ–±—ã –∏—Å—á–µ–∑ ¬´—á–∞—Å–∏–∫¬ª –Ω–∞ –∫–Ω–æ–ø–∫–µ
        try:
            tg_answer_callback(cbid, "–ì–æ—Ç–æ–≤–æ")
        except Exception:
            pass

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        if action == "received":
            # –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û ‚Üí —Å—Ç–∞–≤–∏–º –≤ —Ç–∞–±–ª–∏—Ü–µ –î–û–°–¢–ê–í–õ–ï–ù–û
            update_sheet_status(order_id, "–î–û–°–¢–ê–í–õ–ï–ù–û")
            tg_send_message(f"üì¶ <b>–¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û</b> –ø–æ –∑–∞—è–≤–∫–µ <b>{html.escape(order_id)}</b>\n–ù–∞–∂–∞–ª: {who}")

        elif action == "approve":
            update_sheet_status(order_id, "–í –†–ê–ë–û–¢–£")
            tg_send_message(f"‚úÖ <b>–í –†–ê–ë–û–¢–£</b> –ø–æ –∑–∞—è–≤–∫–µ <b>{html.escape(order_id)}</b>\n–ù–∞–∂–∞–ª: {who}")

        elif action == "reject":
            update_sheet_status(order_id, "–û–¢–ö–õ–û–ù–ï–ù–û")
            tg_send_message(f"‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b> –ø–æ –∑–∞—è–≤–∫–µ <b>{html.escape(order_id)}</b>\n–ù–∞–∂–∞–ª: {who}")

        elif action == "revise":
            # –∂–¥—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            PENDING_REVISE[user.get("id")] = order_id
            tg_send_message(
                f"üîß –î–ª—è –∑–∞—è–≤–∫–∏ <b>{html.escape(order_id)}</b> –≤—ã–±—Ä–∞–Ω–æ <b>–ù–ê –î–û–†–ê–ë–û–¢–ö–£</b>.\n"
                f"{who}, –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –æ–Ω –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É."
            )

        return {"ok": True}

    # --- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–¥–ª—è ¬´–ù–ê –î–û–†–ê–ë–û–¢–ö–£¬ª) ---
    if "message" in upd:
        msg  = upd["message"]
        uid  = msg.get("from", {}).get("id")
        text = (msg.get("text") or "").strip()

        if uid in PENDING_REVISE and text:
            order_id = PENDING_REVISE.pop(uid)
            update_sheet_status(order_id, "–ù–ê –î–û–†–ê–ë–û–¢–ö–£", comment=text)
            tg_send_message(
                f"üîß <b>–ù–ê –î–û–†–ê–ë–û–¢–ö–£</b> –ø–æ –∑–∞—è–≤–∫–µ <b>{html.escape(order_id)}</b>\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {html.escape(text)}"
            )
        return {"ok": True}

    return {"ok": True}


# ========= Health =========
@app.get("/health")
def health():
    return {"ok": True, "service": "snab-bot", "webhook": "/tg"}
