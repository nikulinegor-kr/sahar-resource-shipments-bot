import os
import requests
from typing import Optional, Dict, Any
from fastapi import FastAPI, Request, Header, HTTPException

app = FastAPI(title="SnabOrders Bot", version="2.3")

# ===== ENV =====
BOT_TOKEN        = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID          = os.getenv("CHAT_ID", "").strip()          # -100... (id –≥—Ä—É–ø–ø—ã)
WEBHOOK_SECRET   = os.getenv("WEBHOOK_SECRET", "").strip()   # –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è /notify
SHEET_SCRIPT_URL = os.getenv("SHEET_SCRIPT_URL", "").strip() # URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Apps Script
SHEET_API_KEY    = os.getenv("SHEET_API_KEY", "").strip()    # –∫–ª—é—á –¥–ª—è –≤—ã–∑–æ–≤–∞ Apps Script

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

# --- –ï–î–ò–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –°–¢–ê–¢–£–°–û–í ---
STATUS_WORK     = "–í –†–ê–ë–û–¢–£"
STATUS_REVISE   = "–ù–ê –î–û–†–ê–ë–û–¢–ö–£"
STATUS_REJECT   = "–û–¢–ö–õ–û–ù–ï–ù–û"
STATUS_RECEIVED = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"

# user_id -> order_id  (–¥–ª—è —Ä–µ–∂–∏–º–∞ ¬´–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É¬ª)
PENDING_REVISE: Dict[int, str] = {}

# ---------- —É—Ç–∏–ª–∏—Ç—ã TG ----------
def tg_send_message(text: str, reply_markup: Optional[Dict]=None, parse_mode: str="HTML"):
    if not BOT_TOKEN or not CHAT_ID:
        print("TG: missing BOT_TOKEN/CHAT_ID")
        return
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    try:
        r = requests.post(f"{TG_API}/sendMessage", json=payload, timeout=10)
        print("tg_send_message:", r.status_code, r.text[:200])
    except Exception as e:
        print("tg_send_message error:", e)

def tg_edit_reply_markup(chat_id: int, message_id: int, reply_markup: Optional[Dict]):
    try:
        r = requests.post(f"{TG_API}/editMessageReplyMarkup",
                          json={"chat_id": chat_id, "message_id": message_id,
                                "reply_markup": reply_markup},
                          timeout=10)
        print("tg_edit_reply_markup:", r.status_code, r.text[:200])
    except Exception as e:
        print("tg_edit_reply_markup error:", e)

def fmt_user(u: Dict[str, Any]) -> str:
    uname = u.get("username")
    if uname:
        return f"@{uname}"
    first = (u.get("first_name") or "").strip()
    last  = (u.get("last_name")  or "").strip()
    full = (first + " " + last).strip()
    return full or f"id:{u.get('id')}"

# ---------- —É—Ç–∏–ª–∏—Ç—ã Sheet ----------
def sheet_update_status(order_id: str, new_status: str, comment: Optional[str]=None):
    if not SHEET_SCRIPT_URL or not SHEET_API_KEY:
        print("SHEET: missing SHEET_SCRIPT_URL/SHEET_API_KEY")
        return {"ok": False, "error": "config"}
    payload = {"action": "update_status", "order_id": order_id, "new_status": new_status}
    if comment is not None:
        payload["comment"] = comment
        payload["action"] = "status_with_comment"
    try:
        r = requests.post(SHEET_SCRIPT_URL,
                          headers={"Authorization": f"Bearer {SHEET_API_KEY}"},
                          json=payload, timeout=12)
        print("sheet_update_status:", r.status_code, r.text[:200])
        return r.json() if r.headers.get("content-type","").startswith("application/json") else {"ok": r.ok}
    except Exception as e:
        print("sheet_update_status error:", e)
        return {"ok": False, "error": str(e)}

# ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def kb_delivered(order_id: str) -> Dict:
    # –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)
    return {"inline_keyboard": [[{"text": "üì¶ –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û", "callback_data": f"received|{order_id}"}]]}

def kb_approval(order_id: str) -> Dict:
    # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ: –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ
    return {
        "inline_keyboard": [
            [{"text": "‚úÖ –í –†–ê–ë–û–¢–£",     "callback_data": f"approve|{order_id}"}],
            [{"text": "üîß –ù–ê –î–û–†–ê–ë–û–¢–ö–£", "callback_data": f"revise|{order_id}"}],
            [{"text": "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û",    "callback_data": f"reject|{order_id}"}],
        ]
    }

def norm(s: str) -> str:
    return (s or "").lower().replace("\u00a0", " ").strip()

# ---------- —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ----------
def make_message(data: Dict[str, Any]) -> str:
    get = lambda k: (data.get(k) or "").strip()
    lines = ["üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>"]
    if get("order_id"):   lines.append(f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {get('order_id')}")
    if get("priority"):   lines.append(f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {get('priority')}")
    if get("status"):     lines.append(f"üöö <b>–°—Ç–∞—Ç—É—Å:</b> {get('status')}")
    if get("carrier"):    lines.append(f"üöõ <b>–¢–ö:</b> {get('carrier')}")
    if get("ttn"):        lines.append(f"üìÑ <b>‚Ññ –¢–¢–ù:</b> {get('ttn')}")
    if get("ship_date"):  lines.append(f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</b> {get('ship_date')}")
    if get("arrival"):    lines.append(f"üìÖ <b>–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</b> {get('arrival')}")
    if get("applicant"):  lines.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {get('applicant')}")
    if get("comment"):    lines.append(f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {get('comment')}")
    return "\n".join(lines)

def pick_keyboard(data: Dict[str, Any]) -> Optional[Dict]:
    st = norm(data.get("status",""))
    cm = norm(data.get("comment",""))
    # –∫–Ω–æ–ø–∫–∞ "–ø–æ–ª—É—á–µ–Ω–æ" —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ ¬´–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫¬ª
    if "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫" in st:
        return kb_delivered(data.get("order_id",""))
    # —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
    if "—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ" in cm:
        return kb_approval(data.get("order_id",""))
    return None

# ---------- ROUTES ----------
@app.get("/")
def root():
    return {"ok": True, "routes": ["/", "/health", "/notify", "/tg"]}

@app.get("/health")
def health():
    return {"ok": True, "service": "snaborders-bot"}

# Google Apps Script —à–ª—ë—Ç —Å—é–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
    if authorization != f"Bearer {WEBHOOK_SECRET}":
        raise HTTPException(status_code=401, detail="Unauthorized")
    data = await req.json()
    text = make_message(data)
    kb   = pick_keyboard(data)
    tg_send_message(text, reply_markup=kb)
    return {"ok": True}

# Telegram webhook
@app.post("/tg")
async def tg_webhook(req: Request):
    upd = await req.json()
    print("TG update:", str(upd)[:800])

    # –Ω–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞
    if "callback_query" in upd:
        cq   = upd["callback_query"]
        user = cq.get("from", {})
        chat = cq.get("message", {}).get("chat", {})
        mid  = cq.get("message", {}).get("message_id")
        data = (cq.get("data") or "")
        parts = data.split("|", 1)
        if len(parts) != 2:
            return {"ok": True}
        action, order_id = parts[0], parts[1]
        who = fmt_user(user)

        # –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            tg_edit_reply_markup(chat_id=chat["id"], message_id=mid, reply_markup=None)
        except Exception as e:
            print("remove kb error:", e)

        if action == "received":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¢–ú–¶ ‚Üí —Å—Ç–∞–≤–∏–º "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
            sheet_update_status(order_id, STATUS_RECEIVED)
            tg_send_message(f"üì¶ <b>–¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û</b> –ø–æ –∑–∞—è–≤–∫–µ <b>{order_id}</b>.\n–ù–∞–∂–∞–ª: {who}")

        elif action == "approve":
            # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ ‚Üí —Å—Ç–∞–≤–∏–º "–í –†–ê–ë–û–¢–£"
            sheet_update_status(order_id, STATUS_WORK)
            tg_send_message(f"‚úÖ <b>–í –†–ê–ë–û–¢–£</b> –ø–æ –∑–∞—è–≤–∫–µ <b>{order_id}</b>.\n–ù–∞–∂–∞–ª: {who}")

        elif action == "reject":
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚Üí —Å—Ç–∞–≤–∏–º "–û–¢–ö–õ–û–ù–ï–ù–û"
            sheet_update_status(order_id, STATUS_REJECT)
            tg_send_message(f"‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b> –ø–æ –∑–∞—è–≤–∫–µ <b>{order_id}</b>.\n–ù–∞–∂–∞–ª: {who}")

        elif action == "revise":
            # –ñ–¥—ë–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–∞–∂–∞–≤—à–µ–≥–æ ‚Üí –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–∞–≤–∏–º "–ù–ê –î–û–†–ê–ë–û–¢–ö–£" + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            PENDING_REVISE[user.get("id")] = order_id
            tg_send_message(
                f"üîß <b>–ù–ê –î–û–†–ê–ë–û–¢–ö–£</b> –ø–æ –∑–∞—è–≤–∫–µ <b>{order_id}</b>.\n"
                f"{who}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –æ–Ω –ø–æ–ø–∞–¥—ë—Ç –≤ —Ç–∞–±–ª–∏—Ü—É."
            )
        return {"ok": True}

    # —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ ¬´–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É¬ª
    if "message" in upd:
        msg = upd["message"]
        uid = msg.get("from", {}).get("id")
        text = (msg.get("text") or "").strip()
        if uid in PENDING_REVISE and text:
            order_id = PENDING_REVISE.pop(uid)
            # –°—Ç–∞–≤–∏–º "–ù–ê –î–û–†–ê–ë–û–¢–ö–£" –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            sheet_update_status(order_id, STATUS_REVISE, comment=text)
            tg_send_message(
                f"üîß <b>–ù–ê –î–û–†–ê–ë–û–¢–ö–£</b> –ø–æ –∑–∞—è–≤–∫–µ <b>{order_id}</b>.\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {text}"
            )
        return {"ok": True}

    return {"ok": True}
