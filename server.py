# server.py
import os, html, requests
from fastapi import FastAPI, Request, Header, HTTPException
from typing import Optional, Dict, Any

BOT_TOKEN        = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID          = os.getenv("CHAT_ID", "").strip()
WEBHOOK_SECRET   = os.getenv("WEBHOOK_SECRET", "").strip()
SHEET_SCRIPT_URL = os.getenv("SHEET_SCRIPT_URL", "").strip()
SHEET_API_KEY    = os.getenv("SHEET_API_KEY", "").strip()

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}" if BOT_TOKEN else ""

app = FastAPI(title="Snab Notify Bot", version="1.3.0")

# ---------- Telegram helpers ----------
def tg_call(method: str, payload: Dict[str, Any]) -> Dict[str, Any]:
  url = f"{TG_API}/{method}"
  r = requests.post(url, json=payload, timeout=15)
  try:
    return r.json()
  except Exception:
    return {"ok": False, "status": r.status_code, "text": r.text}

def tg_send(text: str, reply_markup: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
  payload = {
    "chat_id": CHAT_ID,
    "text": text,
    "parse_mode": "HTML",
    "disable_web_page_preview": True
  }
  if reply_markup:
    payload["reply_markup"] = reply_markup
  return tg_call("sendMessage", payload)

def tg_edit_reply_markup(chat_id: str, message_id: int, reply_markup: Optional[Dict[str, Any]]):
  payload = {"chat_id": chat_id, "message_id": message_id, "reply_markup": reply_markup}
  return tg_call("editMessageReplyMarkup", payload)

def tg_answer_cbq(cbq_id: str, text: str, show_alert: bool = False):
  return tg_call("answerCallbackQuery", {"callback_query_id": cbq_id, "text": text, "show_alert": show_alert})

# ---------- Message render ----------
def render_text(data: Dict[str, Any]) -> str:
  g = lambda k: (data.get(k) or "").strip()
  lines = ["üì¶ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ"]
  order = g("order_id") or "‚Äî"
  lines.append(f"üßæ –ó–∞—è–≤–∫–∞: {html.escape(order)}")
  if g("priority"):   lines.append(f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {html.escape(g('priority'))}")
  if g("status"):     lines.append(f"üöö –°—Ç–∞—Ç—É—Å: {html.escape(g('status'))}")
  if g("carrier"):    lines.append(f"üöõ –¢–ö: {html.escape(g('carrier'))}")
  if g("ttn"):        lines.append(f"üìÑ ‚Ññ –¢–¢–ù: {html.escape(g('ttn'))}")
  if g("ship_date"):  lines.append(f"üìÖ –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {html.escape(g('ship_date'))}")
  if g("arrival"):    lines.append(f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {html.escape(g('arrival'))}")
  if g("applicant"):  lines.append(f"üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å: {html.escape(g('applicant'))}")
  if g("comment"):    lines.append(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {html.escape(g('comment'))}")
  return "\n".join(lines)

def needs_button(status: str) -> bool:
  """–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –¢–ö' (—Ä–µ–≥–∏—Å—Ç—Ä/–ø—Ä–æ–±–µ–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)."""
  s = (status or "").strip().lower()
  return s == "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫"

# ---------- Routes ----------
@app.get("/")
def root():
  return {"ok": True, "routes": ["/", "/health", "/tg (GET/POST)", "/notify", "/docs"]}

@app.get("/health")
def health():
  return {"ok": True, "service": "snab-bot", "webhook": "/tg"}

@app.get("/tg")
def tg_get():
  return {"ok": True, "route": "/tg"}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Google Sheets
@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
  if not authorization or not authorization.startswith("Bearer "):
    raise HTTPException(status_code=401, detail="Missing Authorization header")
  token = authorization.split("Bearer ", 1)[-1].strip()
  if token != WEBHOOK_SECRET:
    raise HTTPException(status_code=401, detail="Invalid token")

  try:
    data = await req.json()
  except Exception:
    raise HTTPException(status_code=400, detail="Invalid JSON")

  text = render_text(data)

  # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –¢–ö"
  kb = None
  row_index = data.get("row_index")
  status = (data.get("status") or "")
  if row_index and needs_button(status):
    kb = {
      "inline_keyboard": [[
        {"text": "üì¶ –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û", "callback_data": f"rcv:{int(row_index)}"}
      ]]
    }

  res = tg_send(text, reply_markup=kb)
  if not res.get("ok"):
    raise HTTPException(status_code=502, detail=f"Telegram error: {res}")
  return {"ok": True, "sent": True}

# Telegram webhook: –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏
@app.post("/tg")
async def tg_webhook(req: Request):
  update = await req.json()
  # print("TG webhook:", update)  # –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
  if "callback_query" in update:
    cbq = update["callback_query"]
    data = cbq.get("data") or ""
    cbq_id = cbq.get("id")
    msg = cbq.get("message") or {}
    chat_id = str(msg.get("chat", {}).get("id") or CHAT_ID)
    message_id = msg.get("message_id")

    if data.startswith("rcv:"):
      try:
        row = int(data.split("rcv:",1)[1])
      except Exception:
        tg_answer_cbq(cbq_id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return {"ok": True}

      if not SHEET_SCRIPT_URL or not SHEET_API_KEY:
        tg_answer_cbq(cbq_id, "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
        return {"ok": True}

      # –≤—ã–∑–æ–≤ –≤–µ–±-—Ö—É–∫–∞ Apps Script ‚Üí –≤—ã—Å—Ç–∞–≤–∏—Ç—å "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" –≤ —Å—Ç—Ä–æ–∫–µ row
      try:
        r = requests.post(
          SHEET_SCRIPT_URL,
          json={"apiKey": SHEET_API_KEY, "action": "set_received", "row": row},
          timeout=15
        )
        ok = r.ok and r.json().get("ok")
      except Exception as e:
        ok = False

      if ok:
        tg_answer_cbq(cbq_id, "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
        # –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π: —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if chat_id and message_id:
          tg_edit_reply_markup(chat_id, message_id, reply_markup={})
      else:
        tg_answer_cbq(cbq_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")

    else:
      tg_answer_cbq(cbq_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    return {"ok": True}

  # –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã (–º–∏–Ω–∏–º—É–º)
  msg = update.get("message") or update.get("channel_post") or {}
  text = (msg.get("text") or "").strip().lower()
  if text in ("/start", f"/start@{os.getenv('BOT_USERNAME','')}"):
    tg_send("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∑–∞—è–≤–∫–∞–º. –ö–æ–º–∞–Ω–¥—ã: /today /week /my /priority /help")
  elif text in ("/help", f"/help@{os.getenv('BOT_USERNAME','')}"):
    tg_send("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/today ‚Äì –æ—Ç–≥—Ä—É–∑–∫–∏/–ø—Ä–∏–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è\n/week ‚Äì –∑–∞ 7 –¥–Ω–µ–π\n/my ‚Äì –º–æ–∏ –∑–∞—è–≤–∫–∏\n/priority ‚Äì –∞–≤–∞—Ä–∏–π–Ω—ã–µ")
  # (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –∫ –≤–∞—à–µ–º—É –∫–æ–¥—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
  return {"ok": True}
