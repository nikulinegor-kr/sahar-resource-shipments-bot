import os
import html
import requests
from typing import Optional, Dict, Any, Tuple
from fastapi import FastAPI, Request, Header, HTTPException

app = FastAPI(title="SnabOrdersBot", version="2.2.0")

# ===== ENV =====
BOT_TOKEN        = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID          = os.getenv("CHAT_ID", "").strip()                  # -100...
WEBHOOK_SECRET   = os.getenv("WEBHOOK_SECRET", "").strip()           # –¥–ª—è /notify
SHEET_SCRIPT_URL = os.getenv("SHEET_SCRIPT_URL", "").strip()         # WebApp Apps Script
SHEET_API_KEY    = os.getenv("SHEET_API_KEY", "").strip()            # Bearer –∫–ª—é—á –¥–ª—è Apps Script

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤
RECEIVED_STATUS = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
APPROVED_STATUS = "–í –†–ê–ë–û–¢–£: –°–û–ì–õ–ê–°–û–í–ê–ù–û"
REJECTED_STATUS = "–û–¢–ö–õ–û–ù–ï–ù–û"

# –•—Ä–∞–Ω–∏–º, –∫—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª ¬´–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É¬ª, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—á–∏—Ç–∞–ª–æ—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
# key = (chat_id, user_id) -> order_id
pending_comments: Dict[Tuple[int, int], str] = {}

# ========= helpers =========

def display_name(u: dict) -> str:
    uname = u.get("username")
    if uname:
        return f"@{uname}"
    fn = u.get("first_name", "")
    ln = u.get("last_name", "")
    full = " ".join(x for x in [fn, ln] if x).strip()
    return full or str(u.get("id"))

def tg_send_message(text: str, reply_markup: Optional[dict] = None, parse_mode="HTML"):
    if not BOT_TOKEN or not CHAT_ID:
        print("‚ö†Ô∏è BOT_TOKEN/CHAT_ID not set"); return
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True
    }
    if reply_markup: payload["reply_markup"] = reply_markup
    try:
        r = requests.post(f"{TG_API}/sendMessage", json=payload, timeout=15)
        return r.json()
    except Exception as e:
        print("tg_send_message error:", e)

def tg_edit_reply_markup(chat_id: int, message_id: int, reply_markup: Optional[dict]):
    try:
        requests.post(f"{TG_API}/editMessageReplyMarkup",
                      json={"chat_id": chat_id, "message_id": message_id,
                            "reply_markup": reply_markup or {}},
                      timeout=10)
    except Exception as e:
        print("tg_edit_reply_markup error:", e)

def update_sheet_status(order_id: str, new_status: str, comment: Optional[str] = None):
    """–ë—å—ë–º –≤ Apps Script Web App (Bearer SHEET_API_KEY)."""
    if not SHEET_SCRIPT_URL or not SHEET_API_KEY:
        print("‚ö†Ô∏è SHEET_SCRIPT_URL/SHEET_API_KEY not set"); return
    body = {
        "action": "status_with_comment" if comment else "update_status",
        "order_id": order_id,
        "new_status": new_status
    }
    if comment:
        body["comment"] = comment
    try:
        r = requests.post(
            SHEET_SCRIPT_URL,
            headers={"Authorization": f"Bearer {SHEET_API_KEY}"},
            json=body,
            timeout=20
        )
        print("Sheet update:", r.status_code, r.text[:300])
    except Exception as e:
        print("update_sheet_status error:", e)

def norm(s: str) -> str:
    return (s or "").lower().replace("\u00A0"," ").strip()

def is_delivered_trigger(status: str, comment: str) -> bool:
    s = norm(status); c = norm(comment)
    return ("–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫" in s) or ("–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫" in c)

def is_approval_needed(comment: str) -> bool:
    return "—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ" in norm(comment)

def kb_received(order_id: str):
    return {"inline_keyboard":[
        [{"text":"üì¶ –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û", "callback_data": f"received|{order_id}"}]
    ]}

def kb_approval(order_id: str):
    # –¢—Ä–∏ —Å—Ç—Ä–æ–∫–∏ ‚Äî —á—Ç–æ–±—ã —É–º–µ—Å—Ç–∏–ª–æ—Å—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
    return {"inline_keyboard":[
        [{"text":"‚úÖ –í –†–ê–ë–û–¢–£",      "callback_data": f"approve|{order_id}"}],
        [{"text":"üîß –ù–ê –î–û–†–ê–ë–û–¢–ö–£", "callback_data": f"revise|{order_id}"}],
        [{"text":"‚ùå –û–¢–ö–õ–û–ù–ï–ù–û",    "callback_data": f"reject|{order_id}"}],
    ]}

def kb_disabled(title: str):
    # ¬´–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è¬ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    return {"inline_keyboard":[
        [{"text": f"üîí {title}", "callback_data": "noop"}]
    ]}

def build_message(d: dict) -> Tuple[str, Optional[dict]]:
    """–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è + –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞."""
    get = lambda k: (d.get(k) or "").strip()
    lines = ["üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>"]
    if get("order_id"):   lines.append(f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {html.escape(get('order_id'))}")
    if get("priority"):   lines.append(f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {html.escape(get('priority'))}")
    if get("status"):     lines.append(f"üöö <b>–°—Ç–∞—Ç—É—Å:</b> {html.escape(get('status'))}")
    if get("carrier"):    lines.append(f"üöõ <b>–¢–ö:</b> {html.escape(get('carrier'))}")
    if get("ttn"):        lines.append(f"üìÑ <b>‚Ññ –¢–¢–ù:</b> {html.escape(get('ttn'))}")
    if get("applicant"):  lines.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {html.escape(get('applicant'))}")
    if get("comment"):    lines.append(f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {html.escape(get('comment'))}")
    text = "\n".join(lines)

    kb = None
    if is_approval_needed(get("comment")):
        kb = kb_approval(get("order_id"))
    elif is_delivered_trigger(get("status"), get("comment")):
        kb = kb_received(get("order_id"))
    return text, kb

# ========= endpoints =========

@app.get("/health")
def health():
    return {"ok": True, "service": "snaborders-bot"}

@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
    if authorization != f"Bearer {WEBHOOK_SECRET}":
        raise HTTPException(status_code=401, detail="Unauthorized")
    data = await req.json()
    text, kb = build_message(data)
    tg_send_message(text, reply_markup=kb)
    return {"ok": True}

@app.post("/tg")
async def tg_webhook(req: Request):
    upd = await req.json()
    print("TG update:", str(upd)[:500])

    # --- callback buttons ---
    if "callback_query" in upd:
        cq = upd["callback_query"]
        data = cq.get("data","")
        msg  = cq.get("message", {})
        chat_id = msg.get("chat",{}).get("id")
        message_id = msg.get("message_id")
        u = cq.get("from", {})
        who = display_name(u)

        if "|" in data:
            action, order_id = data.split("|",1)
        else:
            return {"ok": True}

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ä–∞–∑—É
        title_map = {
            "received":"–¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û",
            "approve":"–í –†–ê–ë–û–¢–£",
            "revise":"–ù–ê –î–û–†–ê–ë–û–¢–ö–£",
            "reject":"–û–¢–ö–õ–û–ù–ï–ù–û"
        }
        tg_edit_reply_markup(chat_id, message_id, kb_disabled(title_map.get(action, "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")))

        if action == "received":
            update_sheet_status(order_id, RECEIVED_STATUS)
            tg_send_message(f"üì¶ {who} –æ—Ç–º–µ—Ç–∏–ª(–∞) –∑–∞—è–≤–∫—É <b>{html.escape(order_id)}</b> –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—É—é.")

        elif action == "approve":
            update_sheet_status(order_id, APPROVED_STATUS)
            tg_send_message(f"‚úÖ {who} —Å–æ–≥–ª–∞—Å–æ–≤–∞–ª(–∞) –∑–∞—è–≤–∫—É <b>{html.escape(order_id)}</b> ‚Äî –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞–±–æ—Ç—É.")

        elif action == "reject":
            update_sheet_status(order_id, REJECTED_STATUS)
            tg_send_message(f"‚ùå {who} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –∑–∞—è–≤–∫—É <b>{html.escape(order_id)}</b>.")

        elif action == "revise":
            # –∂–¥—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pending_comments[(chat_id, u.get("id"))] = order_id
            tg_send_message(
                f"üîß {who}, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ <b>{html.escape(order_id)}</b>.\n"
                f"–û–Ω –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ¬´–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É¬ª.")
        return {"ok": True}

    # --- –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ª–æ–≤–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è ¬´–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É¬ª) ---
    if "message" in upd:
        m = upd["message"]
        chat_id = m.get("chat",{}).get("id")
        user_id = m.get("from",{}).get("id")
        text = (m.get("text") or "").strip()
        key = (chat_id, user_id)
        if key in pending_comments and text:
            order_id = pending_comments.pop(key)
            new_status = f"–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"
            update_sheet_status(order_id, new_status, comment=text)
            who = display_name(m.get("from",{}))
            tg_send_message(f"üîß {who} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∑–∞—è–≤–∫—É <b>{html.escape(order_id)}</b> –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n"
                            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {html.escape(text)}")
        return {"ok": True}

    return {"ok": True}
