import os
import html
import requests
from fastapi import FastAPI, Request, Header, HTTPException
from pydantic import BaseModel
from typing import Optional, Dict, Any, List

# ========= ENV =========
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID = os.getenv("CHAT_ID", "").strip()             # –≥—Ä—É–ø–ø–∞ –¥–ª—è /notify (–∏–∑ —Ç–∞–±–ª–∏—Ü)
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "").strip()
SHEET_CSV_URL = os.getenv("SHEET_CSV_URL", "").strip() # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –±—É–¥—É—â–∏—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç–∞–±–ª–∏—Ü

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}" if BOT_TOKEN else ""

app = FastAPI(title="Snab Notify Bot", version="1.3.0")

# ========= MODELS =========
class OrderPayload(BaseModel):
    order_id: Optional[str] = None
    recipient: Optional[str] = None
    priority: Optional[str] = None
    status: Optional[str] = None
    ship_date: Optional[str] = None
    arrival: Optional[str] = None
    carrier: Optional[str] = None
    ttn: Optional[str] = None
    applicant: Optional[str] = None
    comment: Optional[str] = None


# ========= HELPERS =========
def tg_send_message_to(chat_id: str | int, text: str, parse_mode: str = "HTML") -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç (–¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã)."""
    if not BOT_TOKEN:
        return {"ok": False, "error": "BOT_TOKEN missing"}
    url = f"{TG_API}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True,
    }
    r = requests.post(url, json=payload, timeout=15)
    try:
        return r.json()
    except Exception:
        return {"ok": r.ok, "status": r.status_code, "text": r.text}


def tg_send_to_group(text: str) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É CHAT_ID (–¥–ª—è /notify –∏–∑ —Ç–∞–±–ª–∏—Ü)."""
    if not BOT_TOKEN or not CHAT_ID:
        return {"ok": False, "error": "BOT_TOKEN or CHAT_ID missing"}
    return tg_send_message_to(CHAT_ID, text)


def format_order_text(data: Dict[str, Any]) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü."""
    get = lambda k: (data.get(k) or "").strip()
    lines = ["üì¶ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ"]
    order = get("order_id") or "‚Äî"
    lines.append(f"üßæ –ó–∞—è–≤–∫–∞: {html.escape(order)}")

    if get("priority"):
        lines.append(f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {html.escape(get('priority'))}")
    if get("status"):
        lines.append(f"üöö –°—Ç–∞—Ç—É—Å: {html.escape(get('status'))}")
    if get("carrier"):
        lines.append(f"üöõ –¢–ö: {html.escape(get('carrier'))}")
    if get("ttn"):
        lines.append(f"üìÑ ‚Ññ –¢–¢–ù: {html.escape(get('ttn'))}")
    if get("ship_date"):
        lines.append(f"üìÖ –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {html.escape(get('ship_date'))}")
    if get("arrival"):
        lines.append(f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {html.escape(get('arrival'))}")
    if get("applicant"):
        lines.append(f"üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å: {html.escape(get('applicant'))}")
    # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    comment = get("comment")
    if comment and not all(c in "-‚Äì‚Äî " for c in comment):
        lines.append(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {html.escape(comment)}")
    return "\n".join(lines)


def parse_update_for_message(update: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –¥–æ—Å—Ç–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ update:
    - message (–ª–∏—á–∫–∞/–≥—Ä—É–ø–ø–∞)
    - channel_post (–µ—Å–ª–∏ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ)
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º dict —Å –ø–æ–ª—è–º–∏ chat_id, text, from_user.
    """
    msg = update.get("message") or update.get("channel_post")
    if not msg:
        return None
    chat = msg.get("chat") or {}
    chat_id = chat.get("id")
    text = msg.get("text") or ""
    from_user = msg.get("from") or msg.get("author_signature") or {}
    return {"chat_id": chat_id, "text": text, "from_user": from_user}


def normalize_command(text: str, bot_username: Optional[str]) -> str:
    """
    /start, /start@BotName -> /start
    /help@BotName -> /help –∏ —Ç.–¥.
    """
    if not text.startswith("/"):
        return ""
    cmd = text.split()[0]  # –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    if "@" in cmd and bot_username:
        # —É–¥–∞–ª–∏–º —Å—É—Ñ—Ñ–∏–∫—Å @botname
        name = bot_username.lower()
        if cmd.lower().endswith(f"@{name}"):
            cmd = cmd[: cmd.index("@")]
    return cmd.lower()


# ========= SERVICE ROUTES =========
@app.get("/")
def root():
    return {"ok": True, "routes": ["/", "/health", "/tg (GET/POST)", "/notify", "/docs"]}


@app.get("/health")
def health():
    return {"ok": True, "service": "snab-bot", "webhook": "/tg"}


@app.get("/tg")
def get_tg():
    return {"ok": True, "route": "/tg"}


# ========= NOTIFY FROM GOOGLE SHEETS =========
@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
    # —Å–µ–∫—Ä–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Missing Authorization header")
    token = authorization.split("Bearer ", 1)[-1].strip()
    if token != WEBHOOK_SECRET:
        raise HTTPException(status_code=401, detail="Invalid token")

    try:
        data = await req.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")
    if not isinstance(data, dict):
        raise HTTPException(status_code=400, detail="Body must be JSON object")

    msg_text = format_order_text(data)
    res = tg_send_to_group(msg_text)
    if not res.get("ok"):
        raise HTTPException(status_code=502, detail=f"Telegram error: {res}")
    return {"ok": True, "telegram": res}


# ========= TELEGRAM WEBHOOK (COMMANDS) =========
@app.post("/tg")
async def telegram_webhook(req: Request):
    update = await req.json()
    # print(update)  # –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–æ–≥–∞—Ö

    # –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç service updates: my_chat_member, chat_member –∏ —Ç.–ø.
    msg_info = parse_update_for_message(update)
    if not msg_info:
        return {"ok": True, "skipped": True}

    chat_id = msg_info["chat_id"]
    text = msg_info["text"] or ""
    from_user = msg_info["from_user"] or {}
    bot_username = os.getenv("BOT_USERNAME", "").strip()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å

    cmd = normalize_command(text, bot_username)
    if not cmd:
        # –∏–≥–Ω–æ—Ä –≤—Å–µ–≥–æ, —á—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω–∞–¥–æ)
        return {"ok": True}

    # --- –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ä–∞–∑—É ---
    if cmd == "/start":
        reply = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–Ω–∞–±–∂–µ–Ω–∏—è.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID"
        )
        tg_send_message_to(chat_id, reply)
        return {"ok": True}

    if cmd == "/help":
        reply = (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
            "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
            # —Å—é–¥–∞ –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º ¬´—É–º–Ω—ã–µ¬ª –∫–æ–º–∞–Ω–¥—ã, –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏–º CSV
        )
        tg_send_message_to(chat_id, reply)
        return {"ok": True}

    if cmd == "/id":
        uid = from_user.get("id", "‚Äî")
        uname = from_user.get("username")
        name = (from_user.get("first_name") or "") + " " + (from_user.get("last_name") or "")
        name = name.strip() or "‚Äî"
        who = f"@{uname}" if uname else name
        tg_send_message_to(chat_id, f"–í–∞—à ID: <b>{uid}</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {html.escape(who)}")
        return {"ok": True}

    # --- –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–¥ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ---
    # –µ—Å–ª–∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π CSV (SHEET_CSV_URL), –∏—Ö –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.
    data_cmds = {"/my", "/status", "/today", "/week", "/search", "/priority", "/last"}
    if cmd in data_cmds:
        if not SHEET_CSV_URL:
            tg_send_message_to(
                chat_id,
                "–ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞. –ê–¥–º–∏–Ω: –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è SHEET_CSV_URL (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π CSV)."
            )
            return {"ok": True}

        # –∑–¥–µ—Å—å –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É CSV –∏ –ª–æ–≥–∏–∫—É
        tg_send_message_to(chat_id, "–ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω).")
        return {"ok": True}

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    tg_send_message_to(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–±–µ—Ä–∏—Ç–µ /help")
    return {"ok": True}


# ========= LOCAL RUN =========
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("server:app", host="0.0.0.0", port=8000)
