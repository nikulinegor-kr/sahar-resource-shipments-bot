import os
import requests
import html
from typing import Optional, Dict, Any
from fastapi import FastAPI, Request, Header, HTTPException

app = FastAPI(title="SnabOrders Bot", version="2.3")

# ===== ENV =====
BOT_TOKEN        = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID          = os.getenv("CHAT_ID", "").strip()          # -100... (id –≥—Ä—É–ø–ø—ã)
WEBHOOK_SECRET   = os.getenv("WEBHOOK_SECRET", "").strip()   # –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è /notify
SHEET_SCRIPT_URL = os.getenv("SHEET_SCRIPT_URL", "").strip() # URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Apps Script
SHEET_API_KEY    = os.getenv("SHEET_API_KEY", "").strip()    # –∫–ª—é—á –¥–ª—è –≤—ã–∑–æ–≤–∞ Apps Script

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

# user_id -> order_id  (–¥–ª—è —Ä–µ–∂–∏–º–∞ ¬´–ù–ê –î–û–†–ê–ë–û–¢–ö–£¬ª)
PENDING_REVISE: Dict[int, str] = {}

# ---------- TG –£–¢–ò–õ–ò–¢–´ ----------
def tg_send_message(text: str, reply_markup: Optional[Dict]=None, parse_mode: str="HTML"):
    if not BOT_TOKEN or not CHAT_ID:
        print("TG: missing BOT_TOKEN/CHAT_ID")
        return
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    try:
        r = requests.post(f"{TG_API}/sendMessage", json=payload, timeout=10)
        print("tg_send_message:", r.status_code, r.text[:200])
    except Exception as e:
        print("tg_send_message error:", e)

def tg_edit_reply_markup(chat_id: int, message_id: int, reply_markup: Optional[Dict]):
    try:
        r = requests.post(f"{TG_API}/editMessageReplyMarkup",
                          json={"chat_id": chat_id, "message_id": message_id,
                                "reply_markup": reply_markup},
                          timeout=10)
        print("tg_edit_reply_markup:", r.status_code, r.text[:200])
    except Exception as e:
        print("tg_edit_reply_markup error:", e)

def tg_edit_message_text(chat_id: int, message_id: int, new_text: str, parse_mode: str="HTML"):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ —á–∞—Ç)."""
    try:
        r = requests.post(f"{TG_API}/editMessageText",
                          json={
                              "chat_id": chat_id,
                              "message_id": message_id,
                              "text": new_text,
                              "parse_mode": parse_mode,
                              "disable_web_page_preview": True
                          },
                          timeout=10)
        print("tg_edit_message_text:", r.status_code, r.text[:200])
    except Exception as e:
        print("tg_edit_message_text error:", e)

def tg_answer_callback_query(callback_query_id: str, text: str = "", show_alert: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π toast —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–∂–∞–≤—à–µ–≥–æ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    try:
        requests.post(
            f"{TG_API}/answerCallbackQuery",
            json={"callback_query_id": callback_query_id, "text": text, "show_alert": show_alert},
            timeout=8,
        )
    except Exception as e:
        print("tg_answer_callback_query error:", e)

def fmt_user(u: Dict[str, Any]) -> str:
    uname = u.get("username")
    if uname:
        return f"@{uname}"
    first = (u.get("first_name") or "").strip()
    last  = (u.get("last_name")  or "").strip()
    full = (first + " " + last).strip()
    return html.escape(full) if full else f"id:{u.get('id')}"

# ---------- SHEET –£–¢–ò–õ–ò–¢–´ ----------
def sheet_update_status(order_id: str, new_status: str, comment: Optional[str]=None):
    if not SHEET_SCRIPT_URL or not SHEET_API_KEY:
        print("SHEET: missing SHEET_SCRIPT_URL/SHEET_API_KEY")
        return {"ok": False, "error": "config"}
    payload = {"action": "update_status", "order_id": order_id, "new_status": new_status}
    if comment is not None:
        payload["comment"] = comment
        payload["action"] = "status_with_comment"
    try:
        r = requests.post(SHEET_SCRIPT_URL,
                          headers={"Authorization": f"Bearer {SHEET_API_KEY}"},
                          json=payload, timeout=12)
        print("sheet_update_status:", r.status_code, r.text[:200])
        return r.json() if r.headers.get("content-type","").startswith("application/json") else {"ok": r.ok}
    except Exception as e:
        print("sheet_update_status error:", e)
        return {"ok": False, "error": str(e)}

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------
def kb_delivered(order_id: str) -> Dict:
    # –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)
    return {"inline_keyboard": [[{"text": "üì¶ –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û", "callback_data": f"received|{order_id}"}]]}

def kb_approval(order_id: str) -> Dict:
    # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ: –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    return {
        "inline_keyboard": [
            [{"text": "‚úÖ –í –†–ê–ë–û–¢–£",     "callback_data": f"approve|{order_id}"}],
            [{"text": "üîß –ù–ê –î–û–†–ê–ë–û–¢–ö–£", "callback_data": f"revise|{order_id}"}],
            [{"text": "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û",    "callback_data": f"reject|{order_id}"}],
        ]
    }

def norm(s: str) -> str:
    return (s or "").lower().replace("\u00a0", " ").strip()

# ---------- –¢–ï–ö–°–¢–´ ----------
def make_message(data: Dict[str, Any]) -> str:
    get = lambda k: (data.get(k) or "").strip()
    lines = ["üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>"]
    if get("order_id"):   lines.append(f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {html.escape(get('order_id'))}")
    if get("priority"):   lines.append(f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {html.escape(get('priority'))}")
    if get("status"):     lines.append(f"üöö <b>–°—Ç–∞—Ç—É—Å:</b> {html.escape(get('status'))}")
    if get("carrier"):    lines.append(f"üöõ <b>–¢–ö:</b> {html.escape(get('carrier'))}")
    if get("ttn"):        lines.append(f"üìÑ <b>‚Ññ –¢–¢–ù:</b> {html.escape(get('ttn'))}")
    if get("ship_date"):  lines.append(f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</b> {html.escape(get('ship_date'))}")
    if get("arrival"):    lines.append(f"üìÖ <b>–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</b> {html.escape(get('arrival'))}")
    if get("applicant"):  lines.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {html.escape(get('applicant'))}")
    if get("comment"):    lines.append(f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {html.escape(get('comment'))}")
    return "\n".join(lines)

def pick_keyboard(data: Dict[str, Any]) -> Optional[Dict]:
    st = norm(data.get("status",""))
    cm = norm(data.get("comment",""))
    # –∫–Ω–æ–ø–∫–∞ "–ø–æ–ª—É—á–µ–Ω–æ" ‚Äî –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ ¬´–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫¬ª
    if "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫" in st:
        return kb_delivered(data.get("order_id",""))
    # —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ ‚Äî –µ—Å–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ¬´—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ¬ª
    if "—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ" in cm:
        return kb_approval(data.get("order_id",""))
    return None

# ---------- ROUTES ----------
@app.get("/")
def root():
    return {"ok": True, "routes": ["/", "/health", "/notify", "/tg"]}

@app.get("/health")
def health():
    return {"ok": True, "service": "snaborders-bot"}

# –ü—Ä–∏–ª–µ—Ç–∞–µ—Ç –∏–∑ Google Apps Script –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏
@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
    if authorization != f"Bearer {WEBHOOK_SECRET}":
        raise HTTPException(status_code=401, detail="Unauthorized")
    data = await req.json()
    text = make_message(data)
    kb   = pick_keyboard(data)
    tg_send_message(text, reply_markup=kb)
    return {"ok": True}

# Telegram webhook
@app.post("/tg")
async def tg_webhook(req: Request):
    upd = await req.json()
    print("TG update:", str(upd)[:800])

    # --- –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ---
    if "callback_query" in upd:
        cq        = upd["callback_query"]
        cq_id     = cq.get("id")
        user      = cq.get("from", {}) or {}
        chat      = cq.get("message", {}).get("chat", {}) or {}
        mid       = cq.get("message", {}).get("message_id")
        orig_text = cq.get("message", {}).get("text") or ""
        data_raw  = (cq.get("data") or "")
        parts     = data_raw.split("|", 1)
        who       = fmt_user(user)

        # –∑–∞—â–∏—Ç–∞ –æ—Ç ¬´–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö¬ª/–ø—É—Å—Ç—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        if data_raw in ("", "noop"):
            tg_answer_callback_query(cq_id, "–£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ ‚úÖ")
            return {"ok": True}

        if len(parts) != 2:
            tg_answer_callback_query(cq_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
            return {"ok": True}

        action, order_id = parts[0], parts[1]

        try:
            # —Å—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            tg_edit_reply_markup(chat_id=chat["id"], message_id=mid, reply_markup=None)

            if action == "received":
                # —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
                sheet_update_status(order_id, "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º ¬´–∫—Ç–æ –Ω–∞–∂–∞–ª¬ª
                footer = f"\n\nüìå <i>–¢–ú–¶ –ø–æ–ª—É—á–µ–Ω–æ ‚Äî –æ—Ç–º–µ—Ç–∏–ª: {who}</i>"
                new_text = (orig_text or "").rstrip() + footer
                tg_edit_message_text(chat_id=chat["id"], message_id=mid, new_text=new_text)
                # –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–∂–∞–≤—à–µ–≥–æ
                tg_answer_callback_query(cq_id, "–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–æ üì¶")
                return {"ok": True}

            elif action == "approve":
                sheet_update_status(order_id, "–í –†–ê–ë–û–¢–£: –°–û–ì–õ–ê–°–û–í–ê–ù–û")
                footer = f"\n\nüìå <i>–í –†–ê–ë–û–¢–£ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: {who}</i>"
                new_text = (orig_text or "").rstrip() + footer
                tg_edit_message_text(chat_id=chat["id"], message_id=mid, new_text=new_text)
                tg_answer_callback_query(cq_id, "–û—Ç–º–µ—á–µ–Ω–æ: –í –†–ê–ë–û–¢–£ ‚úÖ")
                return {"ok": True}

            elif action == "reject":
                sheet_update_status(order_id, "–û–¢–ö–õ–û–ù–ï–ù–û")
                footer = f"\n\nüìå <i>–û–¢–ö–õ–û–ù–ï–ù–û ‚Äî –æ—Ç–º–µ—Ç–∏–ª: {who}</i>"
                new_text = (orig_text or "").rstrip() + footer
                tg_edit_message_text(chat_id=chat["id"], message_id=mid, new_text=new_text)
                tg_answer_callback_query(cq_id, "–û—Ç–º–µ—á–µ–Ω–æ: –û–¢–ö–õ–û–ù–ï–ù–û")
                return {"ok": True}

            elif action == "revise":
                # –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞–∂–∞–≤—à–µ–≥–æ
                PENDING_REVISE[user.get("id")] = order_id
                footer = f"\n\nüìå <i>–ù–ê –î–û–†–ê–ë–û–¢–ö–£ ‚Äî –∂–¥—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç: {who}</i>"
                new_text = (orig_text or "").rstrip() + footer
                tg_edit_message_text(chat_id=chat["id"], message_id=mid, new_text=new_text)
                tg_answer_callback_query(cq_id, "–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üîß")
                return {"ok": True}

            else:
                tg_answer_callback_query(cq_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                return {"ok": True}

        except Exception as e:
            print("callback handler error:", e)
            tg_answer_callback_query(cq_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è")
            return {"ok": True}

    # --- —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è ¬´–ù–ê –î–û–†–ê–ë–û–¢–ö–£¬ª) ---
    if "message" in upd:
        msg  = upd["message"]
        uid  = msg.get("from", {}).get("id")
        text = (msg.get("text") or "").strip()
        if uid in PENDING_REVISE and text:
            order_id = PENDING_REVISE.pop(uid)
            sheet_update_status(order_id, "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", comment=text)
            # –í —á–∞—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º ‚Äî —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É
        return {"ok": True}

    return {"ok": True}
