from fastapi import FastAPI, Request, Header, HTTPException
from typing import Optional, Dict, Any
import requests
from threading import Thread
import os
import re
import html

app = FastAPI()

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
SHEET_SCRIPT_URL = os.getenv("SHEET_SCRIPT_URL")
SHEET_API_KEY = os.getenv("SHEET_API_KEY")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

pending_comments: Dict[int, str] = {}  # –∫—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"


# ======= –£–¢–ò–õ–ò–¢–´ =======

def tg_send_message(text: str, reply_markup: Optional[Dict] = None, parse_mode="HTML"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    if not BOT_TOKEN or not CHAT_ID:
        print("‚ö†Ô∏è BOT_TOKEN or CHAT_ID missing")
        return

    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True,
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup

    try:
        requests.post(f"{TG_API}/sendMessage", json=payload, timeout=8)
    except Exception as e:
        print("tg_send_message error:", e)


def update_sheet_status(order_id: str, new_status: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Apps Script –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    if not SHEET_SCRIPT_URL or not SHEET_API_KEY:
        print("‚ö†Ô∏è SHEET_SCRIPT_URL or SHEET_API_KEY missing")
        return

    try:
        res = requests.post(
            SHEET_SCRIPT_URL,
            headers={"Authorization": f"Bearer {SHEET_API_KEY}"},
            json={"action": "update_status", "order_id": order_id, "new_status": new_status},
            timeout=10,
        )
        print("Sheet update:", res.status_code, res.text)
    except Exception as e:
        print("update_sheet_status error:", e)


def _norm(s: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É: –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, NBSP -> –ø—Ä–æ–±–µ–ª, —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã."""
    return re.sub(r"\s+", " ", (s or "").replace("\u00A0", " ").lower()).strip()


def _is_delivered_to_tk(status: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫' –≤ —Å—Ç–∞—Ç—É—Å–µ."""
    n = _norm(status)
    if not n:
        return False
    # –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if n == "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫":
        return True
    # –¥–æ–ø—É—Å–∫–∏: '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç.–∫.' / –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã / –∑–Ω–∞–∫–∏
    return ("–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" in n) and (re.search(r"\b–≤\s*—Ç\.?–∫\.?\b", n) is not None or " –≤ —Ç–∫" in n)


def build_keyboard(comment: str, status: str, order_id: str) -> Optional[Dict]:
    """
    –ö–Ω–æ–ø–∫–∏ –≤ –°–¢–û–õ–ë–ï–¶ (–∫–∞–∂–¥–∞—è –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ):
      ‚Äì –µ—Å–ª–∏ –°–¢–ê–¢–£–° = '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫' ‚Üí 'üì¶ –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û'
      ‚Äì –µ—Å–ª–∏ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô —Å–æ–¥–µ—Ä–∂–∏—Ç '—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ' ‚Üí —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –∫–∞–∂–¥–∞—è –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ
    """
    rows = []

    # 1) –ü–æ —Å—Ç–∞—Ç—É—Å—É ‚Äî –∫–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¢–ú–¶ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
    if _is_delivered_to_tk(status):
        rows.append([{"text": "üì¶ –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û", "callback_data": f"received|{order_id}"}])

    # 2) –ü–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é ‚Äî –Ω–∞–±–æ—Ä —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è (–∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
    c = _norm(comment)
    if "—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ" in c:
        rows.append([{"text": "‚úÖ –í –†–ê–ë–û–¢–£",      "callback_data": f"approve|{order_id}"}])
        rows.append([{"text": "üîß –ù–ê –î–û–†–ê–ë–û–¢–ö–£",  "callback_data": f"revise|{order_id}"}])
        rows.append([{"text": "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û",     "callback_data": f"reject|{order_id}"}])

    return {"inline_keyboard": rows} if rows else None


def render_message(data: Dict[str, Any]) -> str:
    g = lambda k: html.escape(str(data.get(k) or ""))
    parts = [
        "üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>",
        f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {g('order_id')}",
        f"‚≠ê <b>–°—Ç–∞—Ç—É—Å:</b> {g('status')}",
    ]
    if data.get("priority"):
        parts.append(f"üè∑ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {g('priority')}")
    if data.get("applicant"):
        parts.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {g('applicant')}")
    if data.get("comment"):
        parts.append(f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {g('comment')}")
    return "\n".join(parts)


# ======= /notify (–∏–∑ Google Apps Script) =======

@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
    if authorization != f"Bearer {WEBHOOK_SECRET}":
        raise HTTPException(status_code=401, detail="Unauthorized")

    data = await req.json()
    order_id = data.get("order_id", "")
    comment  = data.get("comment", "")
    status   = data.get("status", "")

    # —Å–æ–±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    msg = render_message(data)
    keyboard = build_keyboard(comment, status, order_id)

    Thread(target=lambda: tg_send_message(msg, reply_markup=keyboard)).start()
    return {"ok": True}


# ======= /tg ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π =======

@app.post("/tg")
async def tg_webhook(req: Request):
    update = await req.json()
    print("TG update:", update)

    if "callback_query" in update:
        cq = update["callback_query"]
        data = cq.get("data", "")
        user = cq.get("from", {})
        user_id = user.get("id")
        first_name = user.get("first_name", "")
        last_name = user.get("last_name", "")
        user_name = (first_name + " " + last_name).strip() or f"ID:{user_id}"
        chat_id = cq["message"]["chat"]["id"]

        parts = data.split("|", 1)
        if len(parts) != 2:
            return {"ok": False}

        action, order_id = parts

        # ‚úÖ –í –†–ê–ë–û–¢–£
        if action == "approve":
            new_status = "–í –†–ê–ë–û–¢–£: –°–û–ì–õ–ê–°–û–í–ê–ù–û"
            msg = f"‚úÖ –ó–∞—è–≤–∫–∞ <b>{order_id}</b> —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É.\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>{html.escape(user_name)}</b>"
            update_sheet_status(order_id, new_status)
            tg_send_message(msg)

        # ‚ùå –û–¢–ö–õ–û–ù–ï–ù–û
        elif action == "reject":
            new_status = "–û–¢–ö–õ–û–ù–ï–ù–û"
            msg = f"‚ùå –ó–∞—è–≤–∫–∞ <b>{order_id}</b> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>{html.escape(user_name)}</b>"
            update_sheet_status(order_id, new_status)
            tg_send_message(msg)

        # üîß –ù–ê –î–û–†–ê–ë–û–¢–ö–£
        elif action == "revise":
            pending_comments[user_id] = order_id
            tg_send_message(
                f"üîß –î–ª—è –∑–∞—è–≤–∫–∏ <b>{order_id}</b> —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É.\n"
                f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>{html.escape(user_name)}</b>"
            )

        # üì¶ –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û
        elif action == "received":
            new_status = "–¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û"
            msg = f"üì¶ –ó–∞—è–≤–∫–∞ <b>{order_id}</b> –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω–∞—è.\nüë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: <b>{html.escape(user_name)}</b>"
            update_sheet_status(order_id, new_status)
            tg_send_message(msg)

        return {"ok": True}

    # === –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ—Ä–∞–±–æ—Ç–∫–∞) ===
    if "message" in update:
        msg = update["message"]
        user = msg.get("from", {})
        user_id = user.get("id")
        text = msg.get("text", "").strip()
        first_name = user.get("first_name", "")
        last_name = user.get("last_name", "")
        user_name = (first_name + " " + last_name).strip() or f"ID:{user_id}"

        if user_id in pending_comments:
            order_id = pending_comments.pop(user_id)
            new_status = f"–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É: {text}"
            update_sheet_status(order_id, new_status)
            tg_send_message(
                f"üîß –ó–∞—è–≤–∫–∞ <b>{order_id}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º:\n"
                f"{html.escape(text)}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>{html.escape(user_name)}</b>"
            )

        return {"ok": True}

    return {"ok": False}
    # === –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ—Ä–∞–±–æ—Ç–∫–∞) ===
    if "message" in update:
        msg = update["message"]
        user = msg.get("from", {})
        user_id = user.get("id")
        text = msg.get("text", "").strip()

        if user_id in pending_comments:
            order_id = pending_comments.pop(user_id)
            # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å—Ç–∞—Ç—É—Å–µ ‚Äî –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –∫–æ–ª–æ–Ω–∫—É –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π,
            # –µ—Å–ª–∏ –≤ Apps Script —Å–¥–µ–ª–∞–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            new_status = f"–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É: {text}"
            update_sheet_status(order_id, new_status)
            tg_send_message(
                f"üîß –ó–∞—è–≤–∫–∞ <b>{order_id}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º:\n{text}"
            )

        return {"ok": True}

    return {"ok": False}


# ======= HEALTH =======
@app.get("/health")
def health():
    return {"status": "ok"}
