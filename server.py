import os
import html
import requests
from fastapi import FastAPI, Request, Header, HTTPException
from pydantic import BaseModel
from typing import Optional, Dict, Any

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID = os.getenv("CHAT_ID", "").strip()
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "").strip()
SHEET_CSV_URL = os.getenv("SHEET_CSV_URL", "").strip()

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}" if BOT_TOKEN else ""

app = FastAPI(title="Snab Notify Bot", version="1.1.0")

# === –ú–û–î–ï–õ–¨ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===
class OrderPayload(BaseModel):
    order_id: Optional[str] = None
    recipient: Optional[str] = None
    priority: Optional[str] = None
    status: Optional[str] = None
    ship_date: Optional[str] = None
    arrival: Optional[str] = None
    carrier: Optional[str] = None
    ttn: Optional[str] = None
    applicant: Optional[str] = None
    comment: Optional[str] = None


# === –•–ï–õ–ü–ï–†: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ===
def tg_send_message(text: str, parse_mode: str = "HTML") -> Dict[str, Any]:
    if not BOT_TOKEN or not CHAT_ID:
        return {"ok": False, "error": "BOT_TOKEN or CHAT_ID missing"}

    url = f"{TG_API}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True,
    }

    try:
        r = requests.post(url, json=payload, timeout=10)
        return r.json()
    except Exception as e:
        return {"ok": False, "error": str(e)}


# === –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê ===
def format_order_text(data: Dict[str, Any]) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ."""
    get = lambda k: (data.get(k) or "").strip()

    lines = ["üì¶ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ"]
    order = get("order_id") or "‚Äî"
    lines.append(f"üßæ –ó–∞—è–≤–∫–∞: {html.escape(order)}")

    if get("priority"):
        lines.append(f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {html.escape(get('priority'))}")
    if get("status"):
        lines.append(f"üöö –°—Ç–∞—Ç—É—Å: {html.escape(get('status'))}")
    if get("carrier"):
        lines.append(f"üöõ –¢–ö: {html.escape(get('carrier'))}")
    if get("ttn"):
        lines.append(f"üìÑ ‚Ññ –¢–¢–ù: {html.escape(get('ttn'))}")
    if get("ship_date"):
        lines.append(f"üìÖ –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {html.escape(get('ship_date'))}")
    if get("arrival"):
        lines.append(f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {html.escape(get('arrival'))}")
    if get("applicant"):
        lines.append(f"üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å: {html.escape(get('applicant'))}")
    if get("comment"):
        lines.append(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {html.escape(get('comment'))}")

    return "\n".join(lines)


# === –°–õ–£–ñ–ï–ë–ù–´–ï –†–û–£–¢–´ ===
@app.get("/")
def root():
    return {"ok": True, "routes": ["/", "/health", "/tg (GET/POST)", "/notify", "/docs"]}


@app.get("/health")
def health():
    return {"ok": True, "service": "snab-bot", "webhook": "/tg"}


@app.get("/tg")
def get_tg():
    return {"ok": True, "route": "/tg"}


# === –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó GOOGLE SCRIPT ===
@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Missing Authorization header")

    token = authorization.split("Bearer ")[-1].strip()
    if token != WEBHOOK_SECRET:
        raise HTTPException(status_code=401, detail="Invalid token")

    # –†–∞–∑–±–∏—Ä–∞–µ–º JSON
    try:
        data = await req.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")

    if not isinstance(data, dict):
        raise HTTPException(status_code=400, detail="Body must be JSON object")

    msg_text = format_order_text(data)
    res = tg_send_message(msg_text)
    return {"ok": True, "telegram_response": res}


# === Telegram Webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
@app.post("/tg")
async def telegram_webhook(req: Request):
    data = await req.json()
    print("TG webhook received:", data)
    return {"ok": True, "received": True}


# === –õ–û–ö–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("server:app", host="0.0.0.0", port=8000)
