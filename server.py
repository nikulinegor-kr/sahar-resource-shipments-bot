import os
import re
import csv
import html
import io
from datetime import datetime, timedelta, date
from typing import Optional, Dict, Any, List

import requests
from fastapi import FastAPI, Request, Header, HTTPException

# ======== –ù–ê–°–¢–†–û–ô–ö–ò –ò –û–ö–†–£–ñ–ï–ù–ò–ï ========
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID = os.getenv("CHAT_ID", "").strip()               # –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ chat_id –∏–∑ –∞–ø–¥–µ–π—Ç–∞
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "").strip()
SHEET_CSV_URL = os.getenv("SHEET_CSV_URL", "").strip()

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}" if BOT_TOKEN else ""

app = FastAPI(title="Snab Notify Bot", version="1.3.0")


# ======== –£–¢–ò–õ–ò–¢–´ ========
def tg_send_message(chat_id: str, text: str, parse_mode: str = "HTML") -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    if not BOT_TOKEN:
        return {"ok": False, "error": "BOT_TOKEN missing"}

    url = f"{TG_API}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True,
    }
    try:
        r = requests.post(url, json=payload, timeout=15)
        return r.json()
    except Exception as e:
        return {"ok": False, "error": str(e)}


def _norm(s: Any) -> str:
    return re.sub(r"\s+", " ", str(s or "")).replace("\u00A0", " ").strip().lower()


def _to_date(v: str) -> Optional[date]:
    """–ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—ã –≤–∏–¥–∞ 13.10.25 / 13.10.2025 / 2025-10-13 –∏ —Ç.–ø."""
    if not v:
        return None
    s = str(v).strip()
    for fmt in ("%d.%m.%y", "%d.%m.%Y", "%Y-%m-%d"):
        try:
            return datetime.strptime(s, fmt).date()
        except Exception:
            pass
    # –∏–Ω–æ–≥–¥–∞ Google CSV –¥–∞—ë—Ç ISO —Å –≤—Ä–µ–º–µ–Ω–µ–º
    try:
        return datetime.fromisoformat(s).date()
    except Exception:
        return None


# –∫–æ–ª–æ–Ω–∫–∏ ‚Äî –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Ä—É—Å—Å–∫–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
HEADER_MAP = {
    "order":      ["–∑–∞—è–≤–∫–∞", "–Ω–∞–∑–≤–∞–Ω–∏–µ", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"],
    "priority":   ["–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"],
    "status":     ["—Å—Ç–∞—Ç—É—Å"],
    "ship_date":  ["–¥–∞—Ç–∞/–æ", "–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏", "–¥–∞—Ç–∞ –æ"],
    "arrival":    ["–¥–∞—Ç–∞/–¥", "–¥–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è", "–¥–∞—Ç–∞ –¥"],
    "carrier":    ["—Ç–∫", "—Ç.–∫.", "–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫"],
    "ttn":        ["‚Ññ —Ç—Ç–Ω", "—Ç—Ç–Ω", "–Ω–∞–∫–ª–∞–¥–Ω–∞—è"],
    "applicant":  ["–∑–∞—è–≤–∏—Ç–µ–ª—å", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä"],
    "comment":    ["–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–∫–æ–º–º–µ–Ω—Ç"],
}


def _header_index(row: List[str]) -> Dict[str, int]:
    idx = {}
    normed = [_norm(h) for h in row]
    for key, variants in HEADER_MAP.items():
        for v in variants:
            if v in normed:
                idx[key] = normed.index(v)
                break
    return idx


def load_rows() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º CSV –∏–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª—è."""
    if not SHEET_CSV_URL:
        raise RuntimeError("SHEET_CSV_URL is not configured")
    r = requests.get(SHEET_CSV_URL, timeout=20)
    r.raise_for_status()
    text = r.content.decode("utf-8")
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º csv.reader, —á—Ç–æ–±—ã –≥–∏–±–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    reader = csv.reader(io.StringIO(text))
    rows = list(reader)
    if not rows:
        return []

    header = rows[0]
    idx = _header_index(header)

    def pick(cols, name):
        i = idx.get(name)
        return cols[i].strip() if (i is not None and i < len(cols)) else ""

    data: List[Dict[str, Any]] = []
    for line in rows[1:]:
        if not any(line):
            continue
        rec = {
            "order":     pick(line, "order"),
            "priority":  pick(line, "priority"),
            "status":    pick(line, "status"),
            "ship_date": pick(line, "ship_date"),
            "arrival":   pick(line, "arrival"),
            "carrier":   pick(line, "carrier"),
            "ttn":       pick(line, "ttn"),
            "applicant": pick(line, "applicant"),
            "comment":   pick(line, "comment"),
        }
        data.append(rec)
    return data


def dt_ru(d: date) -> str:
    months = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è",
    ]
    return f"{d.day} {months[d.month-1]} {d.year}"


def short_line(rec: Dict[str, Any]) -> str:
    parts = [f"‚Ä¢ <b>{html.escape(rec.get('order') or '‚Äî')}</b>"]
    if rec.get("status"):
        parts.append(f"‚Äî {html.escape(rec['status'])}")
    if rec.get("carrier"):
        parts.append(f"‚Äî –¢–ö: {html.escape(rec['carrier'])}")
    if rec.get("ttn"):
        parts.append(f"‚Äî –¢–¢–ù: {html.escape(rec['ttn'])}")
    return " ".join(parts)


# ======== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ò–ó APPS SCRIPT ========
def format_order_text(data: Dict[str, Any]) -> str:
    get = lambda k: (data.get(k) or "").strip()
    lines = ["üì¶ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ"]
    order = get("order_id") or "‚Äî"
    lines.append(f"üßæ –ó–∞—è–≤–∫–∞: {html.escape(order)}")
    if get("priority"):
        lines.append(f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {html.escape(get('priority'))}")
    if get("status"):
        lines.append(f"üöö –°—Ç–∞—Ç—É—Å: {html.escape(get('status'))}")
    if get("carrier"):
        lines.append(f"üöõ –¢–ö: {html.escape(get('carrier'))}")
    if get("ttn"):
        lines.append(f"üìÑ ‚Ññ –¢–¢–ù: {html.escape(get('ttn'))}")
    if get("ship_date"):
        lines.append(f"üìÖ –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {html.escape(get('ship_date'))}")
    if get("arrival"):
        lines.append(f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {html.escape(get('arrival'))}")
    if get("applicant"):
        lines.append(f"üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å: {html.escape(get('applicant'))}")
    if get("comment"):
        lines.append(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {html.escape(get('comment'))}")
    return "\n".join(lines)


# ======== –°–õ–£–ñ–ï–ë–ù–´–ï –†–û–£–¢–´ ========
@app.get("/")
def root():
    return {"ok": True, "routes": ["/", "/health", "/tg (GET/POST)", "/notify", "/docs"]}


@app.get("/health")
def health():
    return {"ok": True, "service": "snab-bot", "webhook": "/tg", "csv": bool(SHEET_CSV_URL)}


@app.get("/tg")
def get_tg():
    return {"ok": True, "route": "/tg"}


# ======== –ü–†–ò–Å–ú –ò–ó APPS SCRIPT (/notify) ========
@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Missing Authorization header")
    token = authorization.split("Bearer ")[-1].strip()
    if token != WEBHOOK_SECRET:
        raise HTTPException(status_code=401, detail="Invalid token")

    try:
        data = await req.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")

    if not isinstance(data, dict):
        raise HTTPException(status_code=400, detail="Body must be JSON object")

    # –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö —à–ª—ë–º –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω CHAT_ID; –∏–Ω–∞—á–µ –∏–≥–Ω–æ—Ä
    chat = CHAT_ID or None
    if not chat:
        return {"ok": True, "skipped": "CHAT_ID is not configured"}

    msg_text = format_order_text(data)
    res = tg_send_message(chat, msg_text)
    return {"ok": True, "telegram_response": res}


# ======== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ========
HELP_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–Ω–∞–±–∂–µ–Ω–∏—è.\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
    "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
    "/today ‚Äî –∑–∞—è–≤–∫–∏ —Å –æ—Ç–≥—Ä—É–∑–∫–æ–π –∏–ª–∏ –ø—Ä–∏–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è\n"
    "/week ‚Äî –∑–∞—è–≤–∫–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π\n"
    "/my [–∏–º—è] ‚Äî –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—â—É –ø–æ –ø—Ä–æ—Ñ–∏–ª—é)\n"
    "/priority ‚Äî –∞–≤–∞—Ä–∏–π–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
)


def parse_command(text: str, bot_username: Optional[str]) -> (str, str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (cmd, arg). –£–±–∏—Ä–∞–µ–º @BotName –≤ –≥—Ä—É–ø–ø–∞—Ö."""
    t = (text or "").strip()
    if not t.startswith("/"):
        return "", ""
    # –æ—Ç—Ä–µ–∑–∞–µ–º @BotName
    if bot_username:
        t = re.sub(fr"@{re.escape(bot_username)}\b", "", t, flags=re.IGNORECASE)
    parts = t.split(maxsplit=1)
    cmd = parts[0].lower()  # /today, /my –∏ —Ç.–ø.
    arg = parts[1].strip() if len(parts) > 1 else ""
    return cmd, arg


def pick_applicant_from_user(user: Dict[str, Any]) -> str:
    """–ü—ã—Ç–∞–µ–º—Å—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∑–∞—è–≤–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Telegram."""
    # –ü—Ä–æ–±—É–µ–º full name ‚Üí username
    full = " ".join([x for x in [user.get("first_name"), user.get("last_name")] if x]).strip()
    if full:
        return full
    if user.get("username"):
        return str(user["username"])
    return ""


def cmd_today(all_rows: List[Dict[str, Any]]) -> str:
    today = date.today()
    res = []
    ship_cnt = 0
    arr_cnt = 0
    for r in all_rows:
        sd = _to_date(r.get("ship_date", ""))
        ad = _to_date(r.get("arrival", ""))
        ok = False
        if sd == today:
            ship_cnt += 1
            ok = True
        if ad == today:
            arr_cnt += 1
            ok = True
        if ok:
            res.append(short_line(r))

    if not res:
        return f"–ù–∞ {dt_ru(today)} –∑–∞—è–≤–æ–∫ –Ω–µ—Ç."
    head = f"–°–µ–≥–æ–¥–Ω—è ({dt_ru(today)}): {len(res)} –∑–∞—è–≤–æ–∫ ‚Äî –æ—Ç–≥—Ä—É–∑–æ–∫: {ship_cnt}, –ø—Ä–∏–±—ã—Ç–∏—è: {arr_cnt}.\n"
    return head + "\n".join(res[:30])  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–≤–æ–¥


def cmd_week(all_rows: List[Dict[str, Any]]) -> str:
    today = date.today()
    till = today + timedelta(days=7)
    res = []
    status_stats: Dict[str, int] = {}
    for r in all_rows:
        sd = _to_date(r.get("ship_date", ""))
        ad = _to_date(r.get("arrival", ""))
        in_range = False
        if sd and today <= sd <= till:
            in_range = True
        if ad and today <= ad <= till:
            in_range = True
        if in_range:
            res.append(short_line(r))
            st = _norm(r.get("status"))
            if st:
                status_stats[st] = status_stats.get(st, 0) + 1

    if not res:
        return f"–í –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π ({dt_ru(today)}‚Äì{dt_ru(till)}) –∑–∞—è–≤–æ–∫ –Ω–µ—Ç."
    # —Å–æ–±–∏—Ä–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ)
    top = sorted(status_stats.items(), key=lambda x: -x[1])
    stats_str = ", ".join([f"{k}: {v}" for k, v in top[:6]])
    head = f"–ù–∞ –Ω–µ–¥–µ–ª–µ {len(res)} –∑–∞—è–≤–æ–∫. –°—Ç–∞—Ç—É—Å—ã: {stats_str or '‚Äî'}.\n"
    return head + "\n".join(res[:40])


def cmd_my(all_rows: List[Dict[str, Any]], arg_name: str, user: Dict[str, Any]) -> str:
    # –∏–º—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
    query = arg_name.strip()
    if not query:
        query = pick_applicant_from_user(user)
    if not query:
        return "–ù–µ –ø–æ–Ω—è–ª, –ø–æ –∫–æ–º—É –∏—Å–∫–∞—Ç—å. –£–∫–∞–∂–∏ –∏–º—è: /my –ò–≤–∞–Ω–æ–≤"

    qn = _norm(query)
    mine = [r for r in all_rows if qn in _norm(r.get("applicant"))]
    if not mine:
        return f'–ó–∞—è–≤–æ–∫ –¥–ª—è "{html.escape(query)}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'

    # –∫–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_stats: Dict[str, int] = {}
    for r in mine:
        st = _norm(r.get("status"))
        if st:
            status_stats[st] = status_stats.get(st, 0) + 1
    stats_str = ", ".join([f"{k}: {v}" for k, v in sorted(status_stats.items(), key=lambda x: -x[1])])

    head = f'–ó–∞—è–≤–∫–∏ –¥–ª—è "{html.escape(query)}": {len(mine)} —à—Ç. ({stats_str or "–±–µ–∑ —Å—Ç–∞—Ç—É—Å–æ–≤"}).\n'
    lines = [short_line(r) for r in mine[:40]]
    return head + "\n".join(lines)


def cmd_priority(all_rows: List[Dict[str, Any]]) -> str:
    crit = [r for r in all_rows if _norm(r.get("priority")).startswith("–∞–≤–∞—Ä")]
    if not crit:
        return "–ê–≤–∞—Ä–∏–π–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç."
    head = f"–ê–≤–∞—Ä–∏–π–Ω—ã–µ –∑–∞—è–≤–∫–∏: {len(crit)}.\n"
    return head + "\n".join([short_line(r) for r in crit[:40]])


# ======== –í–ï–ë–•–£–ö –ò–ó TELEGRAM (/tg) ========
@app.post("/tg")
async def telegram_webhook(req: Request):
    upd = await req.json()
    # chat id + user + text
    msg = upd.get("message") or upd.get("edited_message")
    if not msg:
        return {"ok": True}

    chat_id = str(msg["chat"]["id"])
    user = msg.get("from", {}) or {}
    text = msg.get("text", "") or ""

    # –±–æ—Ç-–Ω–∏–∫ (—á—Ç–æ–±—ã —Ä–µ–∑–∞—Ç—å /cmd@BotName)
    me = requests.get(f"{TG_API}/getMe", timeout=10).json()
    bot_username = (me.get("result") or {}).get("username") or ""

    cmd, arg = parse_command(text, bot_username)
    if not cmd:
        return {"ok": True}  # –∏–≥–Ω–æ—Ä–∏–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
    if cmd in ("/start",):
        return tg_send_message(chat_id, HELP_TEXT)

    if cmd in ("/help",):
        return tg_send_message(chat_id, HELP_TEXT)

    if cmd in ("/id",):
        uid = user.get("id")
        uname = user.get("username")
        full = " ".join([x for x in [user.get("first_name"), user.get("last_name")] if x]).strip()
        text = f"–í–∞—à ID: <b>{uid}</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{html.escape(uname)}\n–ò–º—è: {html.escape(full)}"
        return tg_send_message(chat_id, text)

    # –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç —Ç–∞–±–ª–∏—Ü—É
    try:
        rows = load_rows()
    except Exception as e:
        return tg_send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É: {html.escape(str(e))}")

    if cmd == "/today":
        return tg_send_message(chat_id, cmd_today(rows))

    if cmd == "/week":
        return tg_send_message(chat_id, cmd_week(rows))

    if cmd == "/my":
        return tg_send_message(chat_id, cmd_my(rows, arg, user))

    if cmd == "/priority":
        return tg_send_message(chat_id, cmd_priority(rows))

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    return tg_send_message(chat_id, "–ù–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏ /help")
