# server.py
import os, html, requests
from typing import Optional, Dict, Any
from fastapi import FastAPI, Request, Header, HTTPException

# ====== ENV ======
BOT_TOKEN        = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID          = os.getenv("CHAT_ID", "").strip()                 # –≥—Ä—É–ø–ø–∞
WEBHOOK_SECRET   = os.getenv("WEBHOOK_SECRET", "").strip()
SHEET_SCRIPT_URL = os.getenv("SHEET_SCRIPT_URL", "").strip()        # Web App URL –∏–∑ Apps Script (Anyone)

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}" if BOT_TOKEN else ""

app = FastAPI(title="Snab Notify Bot", version="1.2.0")

# ====== TG helpers ======
def tg_call(method: str, payload: Dict[str, Any]) -> Dict[str, Any]:
    if not BOT_TOKEN:
        return {"ok": False, "error": "BOT_TOKEN missing"}
    url = f"{TG_API}/{method}"
    try:
        r = requests.post(url, json=payload, timeout=15)
        return r.json()
    except Exception as e:
        return {"ok": False, "error": str(e)}

def tg_send_message(text: str, reply_markup: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    if not CHAT_ID:
        return {"ok": False, "error": "CHAT_ID missing"}
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    return tg_call("sendMessage", payload)

def tg_answer_cbq(cbq_id: str, text: str) -> Dict[str, Any]:
    return tg_call("answerCallbackQuery", {"callback_query_id": cbq_id, "text": text, "show_alert": False})

def tg_edit_reply_markup(chat_id: int, message_id: int) -> Dict[str, Any]:
    # —Å–Ω–∏–º–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (reply_markup=None)
    return tg_call("editMessageReplyMarkup", {"chat_id": chat_id, "message_id": message_id})

# ====== Message render ======
def format_order_text(data: Dict[str, Any]) -> str:
    g = lambda k: (data.get(k) or "").strip()
    lines = ["üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>"]

    order = g("order_id") or "‚Äî"
    lines.append(f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {html.escape(order)}")

    if g("priority"):
        lines.append(f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {html.escape(g('priority'))}")
    if g("status"):
        lines.append(f"üöö <b>–°—Ç–∞—Ç—É—Å:</b> {html.escape(g('status'))}")
    if g("carrier"):
        lines.append(f"üöõ <b>–¢–ö:</b> {html.escape(g('carrier'))}")
    if g("ttn"):
        lines.append(f"üìÑ <b>‚Ññ –¢–¢–ù:</b> {html.escape(g('ttn'))}")
    if g("ship_date"):
        lines.append(f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</b> {html.escape(g('ship_date'))}")
    if g("arrival"):
        lines.append(f"üìÖ <b>–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</b> {html.escape(g('arrival'))}")
    if g("applicant"):
        lines.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {html.escape(g('applicant'))}")
    if g("comment"):
        lines.append(f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {html.escape(g('comment'))}")

    return "\n".join(lines)

def build_inline_keyboard(data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """
    –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å = '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –¢–ö' –∏ –µ—Å—Ç—å order_id.
    –ü–æ –Ω–∞–∂–∞—Ç–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º callback_data –≤–∏–¥–∞: rcvd:<order_id>
    """
    status = (data.get("status") or "").strip().lower()
    order_id = (data.get("order_id") or "").strip()
    if not order_id:
        return None
    if status != "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∫":
        return None
    return {
        "inline_keyboard": [[
            {"text": "‚úÖ –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û", "callback_data": f"rcvd:{order_id}"}
        ]]
    }

# ====== Service routes ======
@app.get("/")
def root():
    return {"ok": True, "routes": ["/", "/health", "/tg (GET/POST)", "/notify", "/docs"]}

@app.get("/health")
def health():
    return {"ok": True, "service": "snab-bot", "webhook": "/tg"}

@app.get("/tg")
def get_tg():
    return {"ok": True, "route": "/tg"}

# ====== From Google Apps Script ======
@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
    # auth
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Missing Authorization header")
    token = authorization.split("Bearer ", 1)[-1].strip()
    if token != WEBHOOK_SECRET:
        raise HTTPException(status_code=401, detail="Invalid token")

    # body
    try:
        data = await req.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")

    if not isinstance(data, dict):
        raise HTTPException(status_code=400, detail="Body must be JSON object")

    text = format_order_text(data)
    kb = build_inline_keyboard(data)  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
    res = tg_send_message(text, reply_markup=kb)
    return {"ok": True, "telegram_response": res}

# ====== Telegram webhook: messages + callback_query ======
@app.post("/tg")
async def tg_post(req: Request):
    upd = await req.json()
    # 1) callback_query (–∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ)
    if "callback_query" in upd:
        cbq = upd["callback_query"]
        cbq_id = cbq.get("id")
        from_user = cbq.get("from", {})
        msg = cbq.get("message", {})
        data = cbq.get("data") or ""
        chat_id = msg.get("chat", {}).get("id")
        message_id = msg.get("message_id")

        # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç rcvd:<order_id>
        if data.startswith("rcvd:"):
            order_id = data.split("rcvd:", 1)[-1].strip()
            if order_id and SHEET_SCRIPT_URL:
                # –¥–µ—Ä–≥–∞–µ–º Apps Script: –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
                try:
                    r = requests.post(
                        SHEET_SCRIPT_URL,
                        json={"order_id": order_id, "status": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"},
                        timeout=15,
                    )
                    ok = (r.status_code == 200) and (r.json().get("ok") is True)
                except Exception as e:
                    ok = False

                if ok:
                    tg_answer_cbq(cbq_id, "–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ")
                    # —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è
                    if chat_id and message_id:
                        tg_edit_reply_markup(chat_id, message_id)
                else:
                    tg_answer_cbq(cbq_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                tg_answer_cbq(cbq_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–µ—Ç URL —Å–∫—Ä–∏–ø—Ç–∞).")
        else:
            tg_answer_cbq(cbq_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return {"ok": True}

    # 2) –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å /start,/help –∏ —Ç.–¥. (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if "message" in upd:
        text = (upd["message"].get("text") or "").strip()
        chat_id = upd["message"].get("chat", {}).get("id")
        if text == "/start":
            tg_send_message("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–Ω–∞–±–∂–µ–Ω–∏—è. –ë—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∑–∞—è–≤–æ–∫.")
        elif text == "/help":
            tg_send_message("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help")
        return {"ok": True}

    return {"ok": True, "ignored": True}

# ====== Local run ======
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("server:app", host="0.0.0.0", port=8000)
