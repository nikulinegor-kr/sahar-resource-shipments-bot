# app.py
import os
import html
import requests
from typing import Optional, List

from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel

# =======================
#   –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =======================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID = os.getenv("CHAT_ID", "").strip()  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º ‚Äî —Ç–æ–≥–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ /notify –Ω–µ —à–ª—ë–º
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "").strip()
SHEET_CSV_URL = os.getenv("SHEET_CSV_URL", "").strip()  # –Ω–∞ –±—É–¥—É—â–µ–µ

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

app = FastAPI(title="BotSnab / Snab Notify", version="1.2.0")


# =======================
#   –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# =======================
def tg_send(chat_id: int | str, text: str, parse_mode: str = "HTML") -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
    """
    try:
        r = requests.post(
            f"{TG_API}/sendMessage",
            json={
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode,
                "disable_web_page_preview": True,
            },
            timeout=15,
        )
        print("=== Telegram API response ===")
        print("Status:", r.status_code)
        print("Body:", r.text)
        return r.ok
    except Exception as e:
        print("TG send error:", e)
        return False


# =======================
#   –ú–æ–¥–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# =======================
class Responsible(BaseModel):
    name: Optional[str] = None
    username: Optional[str] = None  # –±–µ–∑ @
    user_id: Optional[int] = None


class Item(BaseModel):
    name: str
    qty: Optional[float] = None
    unit: Optional[str] = None


class NotifyPayload(BaseModel):
    order_id: str
    recipient: str
    city: Optional[str] = None
    phone: Optional[str] = None
    ship_date: Optional[str] = None
    status: Optional[str] = None
    comment: Optional[str] = None
    responsible: Optional[Responsible] = None
    items: List[Item] = []


def render_message(p: NotifyPayload) -> str:
    esc = lambda s: html.escape(s or "")
    parts = ["<b>üì¶ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>"]

    if p.order_id:
        parts.append(f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {esc(p.order_id)}")
    if p.status:
        parts.append(f"üöö <b>–°—Ç–∞—Ç—É—Å:</b> {esc(p.status)}")
    if p.ship_date:
        parts.append(f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</b> {esc(p.ship_date)}")
    if p.comment:
        parts.append(f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {esc(p.comment)}")

    # –ó–∞—è–≤–∏—Ç–µ–ª—å/–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π ‚Äî –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º: username > user_id > name
    if p.responsible:
        r = p.responsible
        responsible_str = ""
        if r and r.username:
            responsible_str = f"@{esc(r.username)}"
        elif r and r.user_id:
            responsible_str = f"tg://user?id={r.user_id}"
        elif r and r.name:
            responsible_str = esc(r.name)

        if responsible_str:
            parts.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {responsible_str}")

    return "\n".join(parts)


# =======================
#   –°–ª—É–∂–µ–±–Ω—ã–µ —Ä—É—á–∫–∏
# =======================
@app.get("/health")
def health():
    return {"ok": True}


@app.get("/")
def root():
    return {"ok": True, "service": "BotSnab"}


# =======================
#   –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ Google-—Ç–∞–±–ª–∏—Ü (/notify)
# =======================
@app.post("/notify")
def notify(payload: NotifyPayload, authorization: str = ""):
    """
    –û–∂–∏–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization: Bearer <WEBHOOK_SECRET>
    –∏ —à–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ CHAT_ID (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω).
    """
    if WEBHOOK_SECRET and authorization != f"Bearer {WEBHOOK_SECRET}":
        raise HTTPException(status_code=401, detail="Unauthorized")

    if not CHAT_ID:
        raise HTTPException(status_code=400, detail="CHAT_ID is not set")

    msg = render_message(payload)
    ok = tg_send(CHAT_ID, msg)

    if not ok:
        raise HTTPException(status_code=502, detail="Telegram send failed")

    return {"ok": True}


# =======================
#   Telegram Webhook (/tg)
# =======================
@app.post("/tg")
async def tg_webhook(update: dict):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã Telegram.
    –í–∞–∂–Ω–æ: –≤—Å–µ–≥–¥–∞ –±—ã—Å—Ç—Ä–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 ({"ok": True}),
    –∏–Ω–∞—á–µ Telegram –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –≤–µ–±—Ö—É–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
    """
    try:
        # –î–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∞–ø–¥–µ–π—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ message –∏–ª–∏ channel_post
        msg = update.get("message") or update.get("channel_post")
        if not msg:
            # –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (my_chat_member –∏ —Ç.–ø.) –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
            return {"ok": True}

        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()

        # --- –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
        if text.startswith("/start"):
            tg_send(
                chat_id,
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø <b>BotSnab</b> ‚Äî –±–æ—Ç —Å–Ω–∞–±–∂–µ–Ω–∏—è.\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n",
            )

        elif text.startswith("/help"):
            tg_send(
                chat_id,
                "üìñ <b>–ö–æ–º–∞–Ω–¥—ã</b>:\n"
                "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                "/id ‚Äî –≤–∞—à Telegram ID\n"
                "/today ‚Äî –æ—Ç–≥—Ä—É–∑–∫–∏ —Å–µ–≥–æ–¥–Ω—è (—Å–∫–æ—Ä–æ)\n"
                "/week ‚Äî –æ—Ç–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ (—Å–∫–æ—Ä–æ)\n"
                "/status &lt;–°—Ç–∞—Ç—É—Å&gt; ‚Äî –∑–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É (—Å–∫–æ—Ä–æ)\n",
            )

        elif text.startswith("/id"):
            uid = msg.get("from", {}).get("id")
            tg_send(chat_id, f"üÜî –í–∞—à Telegram ID: <code>{uid}</code>")

        # –∑–¥–µ—Å—å –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: /today, /week, /status –∏ —Ç.–ø.
        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º–∏ (–∏–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏).

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200 OK, —á—Ç–æ–±—ã Telegram –Ω–µ ¬´—Ä—É–≥–∞–ª—Å—è¬ª
        print("tg_webhook error:", e)

    return {"ok": True}


# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞ Koyeb –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–µ–Ω ‚Äî uvicorn —Å—Ç–∞—Ä—Ç—É–µ—Ç –∏–∑ Dockerfile / Procfile)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host="0.0.0.0", port=8000)
