import os, html, re, requests
from fastapi import FastAPI, Request, Header, HTTPException
from typing import Optional, Dict, Any

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
BOT_TOKEN        = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID          = os.getenv("CHAT_ID", "").strip()              # ID TG-–≥—Ä—É–ø–ø—ã, —Ñ–æ—Ä–º–∞—Ç -100...
WEBHOOK_SECRET   = os.getenv("WEBHOOK_SECRET", "").strip()       # —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω, —á—Ç–æ –∏ –≤ Google Script
SHEET_SCRIPT_URL = os.getenv("SHEET_SCRIPT_URL", "").strip()     # URL Web App –∏–∑ Apps Script
TG_API           = f"https://api.telegram.org/bot{BOT_TOKEN}"

app = FastAPI(title="Snab Orders Bot")

# ===== –í–†–ï–ú–ï–ù–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï =====
WAITING_COMMENT: Dict[int, str] = {}  # user_id -> order_id

# ===== –£–¢–ò–õ–ò–¢–´ =====
def tg(method: str, data: Dict[str, Any]):
    try:
        r = requests.post(f"{TG_API}/{method}", json=data, timeout=15)
        return r.json()
    except Exception as e:
        return {"ok": False, "error": str(e)}

def tg_message(text, buttons=None):
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }
    if buttons:
        payload["reply_markup"] = {"inline_keyboard": buttons}
    return tg("sendMessage", payload)

def sheet_update(payload):
    if not SHEET_SCRIPT_URL:
        return {"ok": False, "error": "SHEET_SCRIPT_URL not set"}
    try:
        r = requests.post(SHEET_SCRIPT_URL, json=payload, timeout=15)
        return r.json()
    except Exception as e:
        return {"ok": False, "error": str(e)}

def normalize(s): return re.sub(r"\s+", " ", s.lower().replace("\u00a0", " ")).strip()

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ======
def render(data):
    g = lambda k: html.escape(str(data.get(k, "") or ""))
    msg = f"""üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>
üßæ <b>–ó–∞—è–≤–∫–∞:</b> {g('order_id')}
‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {g('priority')}
üöö <b>–°—Ç–∞—Ç—É—Å:</b> {g('status')}
üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {g('applicant')}
üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {g('comment')}
"""
    return msg

def build_keyboard(data):
    rows = []
    st = normalize(data.get("status", ""))
    cm = normalize(data.get("comment", ""))
    order = data.get("order_id")

    if "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" in st and "—Ç–∫" in st:
        rows.append([{"text": "‚úÖ –¢–ú–¶ –ü–û–õ–£–ß–ï–ù–û", "callback_data": f"recv|{order}"}])

    if "—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ" in cm:
        rows.append([{"text": "üü© –í –†–ê–ë–û–¢–£: –°–û–ì–õ–ê–°–û–í–ê–ù–û", "callback_data": f"approve|{order}"}])
        rows.append([
            {"text": "üü® –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", "callback_data": f"revise|{order}"},
            {"text": "üü• –û–¢–ö–õ–û–ù–ï–ù–û", "callback_data": f"reject|{order}"}
        ])
    return rows or None

# ====== API ======
@app.get("/health")
def health(): return {"ok": True}

@app.post("/notify")
async def notify(req: Request, authorization: Optional[str] = Header(None)):
    if not authorization or authorization.replace("Bearer ", "").strip() != WEBHOOK_SECRET:
        raise HTTPException(401, "Unauthorized")

    data = await req.json()
    text = render(data)
    keyboard = build_keyboard(data)
    tg_message(text, keyboard)
    return {"ok": True}

@app.post("/tg")
async def tg_webhook(req: Request):
    upd = await req.json()
    print("TG update:", upd)

    # ==== CALLBACK-–ö–ù–û–ü–ö–ò ====
    if "callback_query" in upd:
        cq = upd["callback_query"]
        user = cq.get("from", {})
        user_id = user.get("id")
        data = cq.get("data", "")
        msg = cq["message"]
        cid, mid = msg["chat"]["id"], msg["message_id"]

        def answer(text): tg("answerCallbackQuery", {"callback_query_id": cq["id"], "text": text})

        if "|" in data:
            act, order = data.split("|", 1)
            if act == "recv":
                sheet_update({"action": "status", "order_id": order, "new_status": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"})
                tg("editMessageReplyMarkup", {"chat_id": cid, "message_id": mid,
                                              "reply_markup": {"inline_keyboard": [[{"text": "‚úÖ –û—Ç–º–µ—á–µ–Ω–æ", "callback_data": "noop"}]]}})
                return answer("–û—Ç–º–µ—á–µ–Ω–æ")

            if act == "approve":
                sheet_update({"action": "status", "order_id": order, "new_status": "–í –†–ê–ë–û–¢–£: –°–û–ì–õ–ê–°–û–í–ê–ù–û"})
                tg("editMessageReplyMarkup", {"chat_id": cid, "message_id": mid,
                                              "reply_markup": {"inline_keyboard": [[{"text": "üü© –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ", "callback_data": "noop"}]]}})
                return answer("–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ")

            if act == "reject":
                sheet_update({"action": "status", "order_id": order, "new_status": "–û–¢–ö–õ–û–ù–ï–ù–û"})
                tg("editMessageReplyMarkup", {"chat_id": cid, "message_id": mid,
                                              "reply_markup": {"inline_keyboard": [[{"text": "üü• –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "callback_data": "noop"}]]}})
                return answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

            if act == "revise":
                WAITING_COMMENT[user_id] = order
                tg_message(f"üü® –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ <b>{order}</b>")
                return answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    # ==== –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ====
    if "message" in upd:
        msg = upd["message"]
        user_id = msg["from"]["id"]
        text = msg.get("text", "").strip()
        if user_id in WAITING_COMMENT:
            order = WAITING_COMMENT.pop(user_id)
            sheet_update({"action": "status_with_comment", "order_id": order,
                          "new_status": "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", "comment": text})
            tg_message(f"üü® –ó–∞—è–≤–∫–∞ <b>{order}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {html.escape(text)}")

    return {"ok": True}
