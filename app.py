# app.py
import os, html, csv, io, requests, datetime as dt
from typing import Optional, List
from fastapi import FastAPI, Header, HTTPException, Request
from pydantic import BaseModel, Field

app = FastAPI(title="Snab Notify", version="1.1.0")

# === ENV ===
BOT_TOKEN       = os.getenv("BOT_TOKEN", "")                   # 8436...Rg
DEFAULT_CHAT_ID = os.getenv("CHAT_ID", "")                     # -100...
WEBHOOK_SECRET  = os.getenv("WEBHOOK_SECRET", "")              # sahar2025secure_longtoken
SHEET_CSV_URL   = os.getenv("SHEET_CSV_URL", "")               # –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π CSV "–ó–∞—è–≤–∫–∏ 2025"

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

# === MODELS (–¥–ª—è /notify –∫–∞–∫ –±—ã–ª–æ) ===
class Responsible(BaseModel):
    name: Optional[str] = None
    username: Optional[str] = None  # –±–µ–∑ @
    user_id: Optional[int] = None

class Item(BaseModel):
    name: str
    qty: Optional[float] = None
    unit: Optional[str] = None

class NotifyPayload(BaseModel):
    order_id: str = Field(..., description="–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏/–∑–∞–∫–∞–∑–∞")
    recipient: str = Field(..., description="–ü–æ–ª—É—á–∞—Ç–µ–ª—å (–∫–æ–º–ø–∞–Ω–∏—è)")
    priority: Optional[str] = None
    city: Optional[str] = None
    phone: Optional[str] = None
    ship_date: Optional[str] = None
    arrival_date: Optional[str] = None
    carrier: Optional[str] = None
    ttn: Optional[str] = None
    status: Optional[str] = None
    applicant: Optional[str] = None
    comment: Optional[str] = None
    responsible: Optional[Responsible] = None
    items: List[Item] = []

# === TELEGRAM helpers ===
def tg_send(chat_id: str, text: str, parse: str = None):
    data = {"chat_id": chat_id, "text": text, "disable_web_page_preview": True}
    if parse:
        data["parse_mode"] = parse
    r = requests.post(f"{TG_API}/sendMessage", json=data, timeout=20)
    print("TG SEND ->", r.status_code, r.text)
    return r.ok

def tg_reply_from_message(message: dict, text: str, parse: str = None):
    chat_id = str(message["chat"]["id"])
    return tg_send(chat_id, text, parse)

# === CSV helpers (–¥–ª—è –∫–æ–º–∞–Ω–¥ /my /status /today /week –∏ —Ç.–¥.) ===
DATE_COL_SHIP = "–î–∞—Ç–∞ –û—Ç–≥—Ä—É–∑–∫–∏"
DATE_COL_ARR  = "–î–∞—Ç–∞/–î"
COLS = {
    "order": "–ó–∞—è–≤–∫–∞",
    "priority": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    "status": "–°—Ç–∞—Ç—É—Å",
    "tk": "–¢–ö",
    "ttn": "‚Ññ –¢–¢–ù",
    "applicant": "–ó–∞—è–≤–∏—Ç–µ–ª—å",
}

def load_rows() -> List[dict]:
    """–ß–∏—Ç–∞–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π CSV Google Sheets (–ª–∏—Å—Ç '–ó–∞—è–≤–∫–∏ 2025')."""
    if not SHEET_CSV_URL:
        return []
    rs = requests.get(SHEET_CSV_URL, timeout=25)
    rs.raise_for_status()
    text = rs.content.decode("utf-8", errors="ignore")
    reader = csv.DictReader(io.StringIO(text))
    return list(reader)

def parse_date_ru(s: str) -> Optional[dt.date]:
    if not s:
        return None
    s = s.strip()
    for fmt in ("%d.%m.%y", "%d.%m.%Y", "%Y-%m-%d"):
        try:
            return dt.datetime.strptime(s, fmt).date()
        except Exception:
            pass
    return None

# === –†–µ–Ω–¥–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (/notify) ===
def render_message(p: NotifyPayload) -> str:
    esc = lambda s: html.escape(s or "")
    lines = ["<b>üì¶ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>", ""]
    if p.order_id:      lines.append(f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {esc(p.order_id)}")
    if p.priority:      lines.append(f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {esc(p.priority)}")
    if p.status:        lines.append(f"üöö <b>–°—Ç–∞—Ç—É—Å:</b> {esc(p.status)}")
    if p.ship_date:     lines.append(f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</b> {esc(p.ship_date)}")
    if p.arrival_date:  lines.append(f"üì¶ <b>–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</b> {esc(p.arrival_date)}")
    if p.carrier:       lines.append(f"üöõ <b>–¢–ö:</b> {esc(p.carrier)}")
    if p.ttn:           lines.append(f"üìÑ <b>‚Ññ –¢–¢–ù:</b> {esc(p.ttn)}")
    if p.applicant:     lines.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {esc(p.applicant)}")
    if p.comment: 
        lines += ["", esc(p.comment)]
    # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if p.responsible:
        r = p.responsible
        if r.username: lines.append(f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> @{esc(r.username)}")
        elif r.user_id: lines.append(f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> tg://user?id={r.user_id}")
        elif r.name:   lines.append(f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {esc(r.name)}")
    return "\n".join(lines)

# === HEALTH ===
@app.get("/health")
def health():
    return {"ok": True}

# === NOTIFY (–∫–∞–∫ –±—ã–ª–æ) ===
@app.post("/notify")
def notify(payload: NotifyPayload, authorization: str = Header(default="")):
    if WEBHOOK_SECRET and authorization != f"Bearer {WEBHOOK_SECRET}":
        raise HTTPException(status_code=401, detail="Unauthorized")

    msg = render_message(payload)
    chat_id = DEFAULT_CHAT_ID or ""  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–ª–∞—Ç—å –≤—Å–µ–≥–¥–∞ –≤ –∫–∞–Ω–∞–ª
    if not chat_id:
        raise HTTPException(status_code=400, detail="CHAT_ID is not set")

    ok = tg_send(chat_id, msg, parse="HTML")
    if not ok:
        raise HTTPException(status_code=502, detail="Telegram send failed")
    return {"ok": True}

# === TELEGRAM WEBHOOK: –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ ===
HELP_TEXT = (
    "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
    "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    "/my ‚Äî –º–æ–∏ –∑–∞—è–≤–∫–∏ (–ø–æ –ó–∞—è–≤–∏—Ç–µ–ª—é)\n"
    "/status ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º\n"
    "/today ‚Äî –æ—Ç–≥—Ä—É–∑–∫–∏ —Å–µ–≥–æ–¥–Ω—è\n"
    "/week ‚Äî –æ—Ç–≥—Ä—É–∑–∫–∏ –Ω–∞ 7 –¥–Ω–µ–π\n"
    "/priority ‚Äî –∞–≤–∞—Ä–∏–π–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
    "/last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
    "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
)

@app.post("/tg")
async def telegram_webhook(req: Request):
    upd = await req.json()
    print("UPDATE:", upd)

    msg = upd.get("message") or upd.get("channel_post")
    if not msg:
        # –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞ –∏ –ø—Ä–æ—á–µ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
        return {"ok": True}

    chat_id = str(msg["chat"]["id"])
    text = (msg.get("text") or "").strip()

    # /id
    if text.startswith("/id"):
        uid = msg["from"]["id"]
        tg_reply_from_message(msg, f"–í–∞—à Telegram ID: <code>{uid}</code>", "HTML")
        return {"ok": True}

    # /start, /help
    if text.startswith("/start") or text.startswith("/help"):
        tg_reply_from_message(msg, HELP_TEXT, "HTML")
        return {"ok": True}

    # –î–∞–ª—å—à–µ –∫–æ–º–∞–Ω–¥—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    rows = []
    try:
        rows = load_rows()
    except Exception as e:
        tg_reply_from_message(msg, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:\n{e}")
        return {"ok": True}

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    def col(row, title): 
        return (row.get(title) or "").strip()

    # /status ‚Äî –ø–æ–¥—Å—á—ë—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    if text.startswith("/status"):
        from collections import Counter
        c = Counter(col(r, COLS["status"]) for r in rows if col(r, COLS["status"]))
        if not c:
            tg_reply_from_message(msg, "–°—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ—Ç.")
            return {"ok": True}
        lines = ["üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º</b>:", ""]
        for k, v in c.most_common():
            lines.append(f"‚Ä¢ {k}: {v}")
        tg_reply_from_message(msg, "\n".join(lines), "HTML")
        return {"ok": True}

    # /priority ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–≤–∞—Ä–∏–π–Ω—ã–µ
    if text.startswith("/priority"):
        pr_list = [r for r in rows if col(r, COLS["priority"]).lower().startswith("–∞–≤–∞—Ä")]
        if not pr_list:
            tg_reply_from_message(msg, "–ê–≤–∞—Ä–∏–π–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
            return {"ok": True}
        top = pr_list[:10]
        out = ["‚ö†Ô∏è <b>–ê–≤–∞—Ä–∏–π–Ω—ã–µ –∑–∞—è–≤–∫–∏ (—Ç–æ–ø-10):</b>", ""]
        for r in top:
            out.append(f"‚Ä¢ {col(r, COLS['order'])} ‚Äî {col(r, COLS['status'])}")
        tg_reply_from_message(msg, "\n".join(out), "HTML")
        return {"ok": True}

    # /today ‚Äî –æ—Ç–≥—Ä—É–∑–∫–∏ —Å–µ–≥–æ–¥–Ω—è
    if text.startswith("/today"):
        today = dt.date.today()
        res = []
        for r in rows:
            d = parse_date_ru(col(r, DATE_COL_SHIP))
            if d == today:
                res.append(r)
        if not res:
            tg_reply_from_message(msg, "–°–µ–≥–æ–¥–Ω—è –æ—Ç–≥—Ä—É–∑–æ–∫ –Ω–µ—Ç.")
            return {"ok": True}
        out = ["üìÖ <b>–û—Ç–≥—Ä—É–∑–∫–∏ —Å–µ–≥–æ–¥–Ω—è:</b>", ""]
        for r in res[:15]:
            out.append(f"‚Ä¢ {col(r, COLS['order'])} ‚Äî {col(r, COLS['status'])} ‚Äî {col(r, COLS['tk'])}")
        tg_reply_from_message(msg, "\n".join(out), "HTML")
        return {"ok": True}

    # /week ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
    if text.startswith("/week"):
        today = dt.date.today()
        until = today + dt.timedelta(days=7)
        res = []
        for r in rows:
            d = parse_date_ru(col(r, DATE_COL_SHIP))
            if d and today <= d <= until:
                res.append((d, r))
        if not res:
            tg_reply_from_message(msg, "–û—Ç–≥—Ä—É–∑–æ–∫ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç.")
            return {"ok": True}
        res.sort(key=lambda x: x[0])
        out = ["üóìÔ∏è <b>–û—Ç–≥—Ä—É–∑–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π:</b>", ""]
        for d, r in res[:20]:
            out.append(f"‚Ä¢ {d.isoformat()} ‚Äî {col(r, COLS['order'])} ‚Äî {col(r, COLS['status'])}")
        tg_reply_from_message(msg, "\n".join(out), "HTML")
        return {"ok": True}

    # /my ‚Äî –ø–æ ¬´–ó–∞—è–≤–∏—Ç–µ–ª—é¬ª
    if text.startswith("/my"):
        u = msg["from"]
        candidates = set(filter(None, [
            u.get("username"),
            u.get("first_name"),
            u.get("last_name"),
            f"{u.get('first_name','')} {u.get('last_name','')}".strip(),
        ]))
        res = []
        for r in rows:
            who = col(r, COLS["applicant"])
            if not who:
                continue
            for c in candidates:
                if c and c.lower() in who.lower():
                    res.append(r)
                    break
        if not res:
            tg_reply_from_message(msg, "–ó–∞—è–≤–æ–∫ –ø–æ –≤–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return {"ok": True}
        out = ["üë§ <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>", ""]
        for r in res[:15]:
            out.append(f"‚Ä¢ {col(r, COLS['order'])} ‚Äî {col(r, COLS['status'])} ‚Äî {col(r, DATE_COL_SHIP)}")
        tg_reply_from_message(msg, "\n".join(out), "HTML")
        return {"ok": True}

    # /last ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    if text.startswith("/last"):
        N = 10
        res = rows[-N:]
        if not res:
            tg_reply_from_message(msg, "–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
            return {"ok": True}
        out = ["üïò <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>", ""]
        for r in res:
            out.append(f"‚Ä¢ {col(r, COLS['order'])} ‚Äî {col(r, COLS['status'])} ‚Äî {col(r, DATE_COL_SHIP)}")
        tg_reply_from_message(msg, "\n".join(out), "HTML")
        return {"ok": True}

    # –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    tg_reply_from_message(msg, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ /help")
    return {"ok": True}
