# app.py
import os
import html
import csv
import io
import json
import logging
from typing import Optional, List, Dict, Any

import requests
from fastapi import FastAPI, Header, HTTPException, Request
from pydantic import BaseModel, Field

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

app = FastAPI(title="Snab Notify + Bot", version="2.0.0")

# ----- ENV -----
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID = os.getenv("CHAT_ID", "").strip()  # –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –≤–µ–±—Ö—É–∫–µ
SHEET_CSV_URL = os.getenv("SHEET_CSV_URL", "").strip()
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "").strip()

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}" if BOT_TOKEN else None


# ---------- –ú–û–î–ï–õ–ò –î–õ–Ø /notify ----------
class Responsible(BaseModel):
    name: Optional[str] = None
    username: Optional[str] = None  # –±–µ–∑ @
    user_id: Optional[int] = None


class Item(BaseModel):
    name: str
    qty: Optional[float] = None
    unit: Optional[str] = None


class NotifyPayload(BaseModel):
    order_id: str = Field(..., description="–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏/–∑–∞–∫–∞–∑–∞")
    recipient: str = Field(..., description="–ü–æ–ª—É—á–∞—Ç–µ–ª—å (–∫–æ–º–ø–∞–Ω–∏—è)")
    city: Optional[str] = None
    phone: Optional[str] = None
    ship_date: Optional[str] = None
    status: Optional[str] = None
    comment: Optional[str] = None
    responsible: Optional[Responsible] = None
    items: List[Item] = []


# ---------- –°–ï–†–í–ò–°–ù–´–ï ----------
def tg_send_message(chat_id: str, text: str, parse_mode: Optional[str] = "HTML"):
    if not TG_API:
        log.error("BOT_TOKEN is empty; cannot call Telegram")
        return False, 500, "BOT_TOKEN is empty"
    url = f"{TG_API}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True,
    }
    r = requests.post(url, json=data, timeout=15)
    log.info("TG send --> %s %s", r.status_code, r.text[:500])
    return r.ok, r.status_code, r.text


def escape(s: Optional[str]) -> str:
    return html.escape(s or "")


def render_notify_message(p: NotifyPayload) -> str:
    parts = []
    if p.order_id:
        parts.append(f"üßæ <b>–ó–∞—è–≤–∫–∞:</b> {escape(p.order_id)}")
    if p.status:
        parts.append(f"üöö <b>–°—Ç–∞—Ç—É—Å:</b> {escape(p.status)}")
    if p.ship_date:
        parts.append(f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</b> {escape(p.ship_date)}")
    if p.comment:
        parts.append(f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {escape(p.comment)}")
    if p.responsible:
        r = p.responsible
        if r.username:
            parts.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> @{escape(r.username)}")
        elif r.user_id:
            parts.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> tg://user?id={r.user_id}")
        elif r.name:
            parts.append(f"üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {escape(r.name)}")
    return "üì¶ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ</b>\n\n" + "\n".join(parts)


def load_sheet_rows() -> List[Dict[str, str]]:
    """–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —á–∏—Ç–∞–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π CSV (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω SHEET_CSV_URL)."""
    if not SHEET_CSV_URL:
        return []
    r = requests.get(SHEET_CSV_URL, timeout=20)
    r.raise_for_status()
    content = r.content.decode("utf-8", errors="ignore")
    reader = csv.DictReader(io.StringIO(content))
    return [dict(row) for row in reader]


# ---------- –ü–£–¢–ò –î–õ–Ø –ü–†–û–í–ï–†–û–ö ----------
@app.get("/health")
def health():
    return {"ok": True}


@app.get("/tg")
def tg_get_probe():
    # –ø—Ä–æ—Å—Ç–æ–π GET, —á—Ç–æ–±—ã Telegram –∏ –≤—ã –º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç –∂–∏–≤
    return {"ok": True, "route": "/tg"}


# ---------- –í–ï–ë–•–£–ö TELEGRAM ----------
@app.post("/tg")
async def tg_webhook(req: Request):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫ Telegram. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start, /help, /id.
    –í–∫–ª—é—á–∏—Ç–µ "Group Privacy: DISABLED" —É –±–æ—Ç–∞, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ.
    """
    if not TG_API:
        raise HTTPException(status_code=500, detail="BOT_TOKEN is not set")

    try:
        update: Dict[str, Any] = await req.json()
    except Exception:
        body = await req.body()
        log.error("Bad JSON from Telegram: %r", body[:500])
        raise HTTPException(status_code=400, detail="Bad JSON")

    log.info("TG update: %s", json.dumps(update)[:2000])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —á–∞—Ç
    msg = update.get("message") or update.get("channel_post")
    if not msg:
        # –¥–ª—è my_chat_member/–ø—Ä–æ—á–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ 200 OK
        return {"ok": True}

    chat = msg.get("chat", {})
    chat_id = chat.get("id")
    text = (msg.get("text") or "").strip()
    from_user = msg.get("from") or {}
    user_id = from_user.get("id")
    username = from_user.get("username") or ""
    first_name = from_user.get("first_name") or ""
    last_name = from_user.get("last_name") or ""
    full_name = (" ".join([first_name, last_name])).strip() or username or str(user_id)

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å
    # Telegram –¥–æ–±–∞–≤–ª—è–µ—Ç entities.type == "bot_command"
    entities = msg.get("entities") or []
    is_command = any(e.get("type") == "bot_command" for e in entities)

    # –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    def reply(text_: str):
        tg_send_message(str(chat_id), text_)

    # –ö–æ–º–∞–Ω–¥—ã
    if is_command:
        cmd = text.split()[0].lower()
        if cmd.startswith("/start"):
            reply(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø <b>BotSnab</b> ‚Äî –±–æ—Ç —Å–Ω–∞–±–∂–µ–Ω–∏—è.\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                "‚Ä¢ /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
            )
            return {"ok": True}

        if cmd.startswith("/help"):
            reply(
                "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:\n"
                "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                "‚Ä¢ /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                "‚Ä¢ /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
            )
            return {"ok": True}

        if cmd.startswith("/id"):
            reply(f"ü™™ –í–∞—à ID: <code>{user_id}</code>\n–ò–º—è: <b>{escape(full_name)}</b>")
            return {"ok": True}

        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        reply("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /help")
        return {"ok": True}

    # –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –º–æ–ª—á–∞ OK (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö)
    return {"ok": True}


# ---------- –í–ê–® –°–¢–ê–†–´–ô –í–•–û–î –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ò–ó –¢–ê–ë–õ–ò–¶ ----------
@app.post("/notify")
def notify(payload: NotifyPayload, authorization: str = Header(default="")):
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ Bearer
    if WEBHOOK_SECRET and authorization != f"Bearer {WEBHOOK_SECRET}":
        raise HTTPException(status_code=401, detail="Unauthorized")

    # –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å: –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª chat_id –≤ ENV ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —à–ª—ë–º
    if not CHAT_ID:
        raise HTTPException(status_code=500, detail="CHAT_ID not configured")

    msg = render_notify_message(payload)
    ok, sc, txt = tg_send_message(CHAT_ID, msg)

    if not ok:
        log.error("Telegram error %s: %s", sc, txt)
        raise HTTPException(status_code=502, detail=f"Telegram error {sc}: {txt}")

    return {"ok": True}
